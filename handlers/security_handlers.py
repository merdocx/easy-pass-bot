import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from database import db
from keyboards.security_keyboards import get_security_main_menu, get_pass_usage_keyboard, get_pass_search_keyboard, get_passes_list_keyboard
from utils.validators import validate_car_number
from config import MESSAGES, ROLES, USER_STATUSES, PASS_STATUSES

logger = logging.getLogger(__name__)
router = Router()

async def is_security(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –æ—Ö—Ä–∞–Ω—ã"""
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user.role == ROLES['SECURITY'] and user.status == USER_STATUSES['APPROVED']


@router.message(Command("search"))
async def search_command(message: Message):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /search"""
    if not await is_security(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=get_security_main_menu())
        return
    
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_pass_search_keyboard())

@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫")
async def handle_search_pass_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫'"""
    logger.info(f"SECURITY SEARCH BUTTON PRESSED by user {message.from_user.id}, text: '{message.text}'")
    
    if not await is_security(message.from_user.id):
        logger.warning(f"User {message.from_user.id} is not security")
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=get_security_main_menu())
        return
    
    logger.info(f"Security user {message.from_user.id} starting search")
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_pass_search_keyboard())

@router.message(F.text & ~F.text.startswith('/') & ~F.text.in_(["üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫", "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º", "üîô –ù–∞–∑–∞–¥", "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùå –û—Ç–º–µ–Ω–∞"]))
async def handle_security_text_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤ (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫)"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–º
    if not await is_security(message.from_user.id):
        # –ï—Å–ª–∏ –Ω–µ –æ—Ö—Ä–∞–Ω–Ω–∏–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ return (—á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–ª–æ—Å—å –¥–∞–ª—å—à–µ)
        return
    
    logger.info(f"SECURITY TEXT MESSAGE from user {message.from_user.id}, text: '{message.text}'")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—à–∏–Ω—ã
    await handle_pass_search_internal(message)

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_pass_search_message(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞"""
    if not await is_security(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=get_security_main_menu())
        return
    
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.", reply_markup=get_security_main_menu())

@router.message(F.text.regexp(r'^\d{1,3}$'))
async def handle_security_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤)"""
    logger.info(f"SECURITY TEXT MESSAGE from user {message.from_user.id}, text: '{message.text}'")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–º
    if not await is_security(message.from_user.id):
        logger.info(f"User {message.from_user.id} is not security, skipping")
        return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ-–æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if message.text in ["üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫", "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º", "üîô –ù–∞–∑–∞–¥"]:
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—à–∏–Ω—ã
    await handle_pass_search_internal(message)

@router.message(F.text.regexp(r'^[–ê-–Ø–∞-—è]\d{3}[–ê-–Ø–∞-—è]{2}\d{3}$'))
async def handle_pass_search(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    logger.info(f"SECURITY PASS SEARCH by user {message.from_user.id}, text: '{message.text}'")
    
    if not await is_security(message.from_user.id):
        logger.warning(f"User {message.from_user.id} is not security")
        return
    
    await handle_pass_search_internal(message)

async def handle_pass_search_internal(message: Message):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞"""
    
    car_number = message.text.strip()
    
    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –µ–≥–æ
    if len(car_number) > 3 and not validate_car_number(car_number):
        await message.answer(MESSAGES['ENTER_CAR_NUMBER'], reply_markup=get_pass_search_keyboard())
        return
    
    # –ò—â–µ–º –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É (–ø–æ–ª–Ω–æ–º—É –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º—É)
    passes = await db.find_all_passes_by_car_number(car_number)
    
    if not passes:
        await message.answer(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{car_number}', –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_security_main_menu())
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    text = f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {len(passes)}\n\n"
    
    for i, pass_obj in enumerate(passes, 1):
        user = await db.get_user_by_id(pass_obj.user_id)
        created_at_str = pass_obj.created_at.strftime('%d.%m.%Y %H:%M') if hasattr(pass_obj.created_at, 'strftime') else str(pass_obj.created_at)
        
        text += f"{i}. {pass_obj.car_number}\n"
        text += f"   üë§ {user.full_name} (–∫–≤. {user.apartment})\n"
        text += f"   üìÖ {created_at_str}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
    keyboard = get_passes_list_keyboard(passes)
    await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("use_pass_"))
async def handle_use_pass_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ callback"""
    if not await is_security(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑ callback_data
    pass_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    pass_obj = await db.get_pass_by_id(pass_id)
    if not pass_obj:
        await callback.answer("‚ùå –ü—Ä–æ–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω
    if pass_obj.status != PASS_STATUSES['ACTIVE']:
        await callback.answer("‚ùå –ü—Ä–æ–ø—É—Å–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await db.update_pass_status(pass_id, PASS_STATUSES['USED'], callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    user = await db.get_user_by_id(pass_obj.user_id)
    
    await callback.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π", show_alert=True)
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–æ–ø—É—Å–∫ {pass_obj.car_number} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π\n\n"
        f"üë§ {user.full_name}\n"
        f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ {user.apartment}"
    )
    await callback.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.",
        reply_markup=get_security_main_menu()
    )

@router.callback_query(F.data == "search_another")
async def handle_search_another_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞"""
    if not await is_security(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.message.edit_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_pass_search_keyboard())


def register_security_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ö—Ä–∞–Ω—ã"""
    logger.info("Registering security handlers")
    dp.include_router(router)
    logger.info("Security handlers registered successfully")


