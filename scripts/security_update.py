#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Easy Pass Bot
"""
import os
import sys
import subprocess
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any

class SecurityUpdater:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.venv_path = self.project_root / 'venv'
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'updates': [],
            'errors': [],
            'vulnerabilities_found': 0,
            'vulnerabilities_fixed': 0
        }
    
    def run_safety_check(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º safety
            cmd = [
                'bash', '-c',
                f'source {self.venv_path}/bin/activate && safety check --json'
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
            
            if result.returncode == 0:
                print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return {'vulnerabilities': [], 'status': 'clean'}
            else:
                try:
                    # –ü–∞—Ä—Å–∏–º JSON –≤—ã–≤–æ–¥
                    safety_data = json.loads(result.stdout)
                    vulnerabilities = safety_data.get('vulnerabilities', [])
                    
                    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
                    return {
                        'vulnerabilities': vulnerabilities,
                        'status': 'vulnerabilities_found'
                    }
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
                    vulnerabilities = []
                    lines = result.stdout.split('\n')
                    for line in lines:
                        if 'Vulnerability found' in line:
                            vulnerabilities.append({'raw_line': line})
                    
                    return {
                        'vulnerabilities': vulnerabilities,
                        'status': 'vulnerabilities_found'
                    }
                    
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}"
            print(f"‚ùå {error_msg}")
            self.results['errors'].append(error_msg)
            return {'vulnerabilities': [], 'status': 'error'}
    
    def update_packages(self, vulnerabilities: List[Dict[str, Any]]) -> List[str]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏"""
        updates = []
        
        if not vulnerabilities:
            return updates
        
        print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤...")
        
        # –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        packages_to_update = []
        
        for vuln in vulnerabilities:
            if 'package' in vuln:
                package = vuln['package']
                if package not in packages_to_update:
                    packages_to_update.append(package)
            elif 'raw_line' in vuln:
                # –ü–∞—Ä—Å–∏–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
                line = vuln['raw_line']
                if 'in' in line and 'version' in line:
                    parts = line.split()
                    for i, part in enumerate(parts):
                        if part == 'in' and i + 1 < len(parts):
                            package = parts[i + 1]
                            if package not in packages_to_update:
                                packages_to_update.append(package)
                            break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
        for package in packages_to_update:
            try:
                print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {package}...")
                
                cmd = [
                    'bash', '-c',
                    f'source {self.venv_path}/bin/activate && pip install --upgrade {package}'
                ]
                
                result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
                
                if result.returncode == 0:
                    updates.append(f"‚úÖ {package} –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    print(f"   ‚úÖ {package} –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {package}: {result.stderr}"
                    updates.append(error_msg)
                    print(f"   {error_msg}")
                    self.results['errors'].append(error_msg)
                    
            except Exception as e:
                error_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {package}: {e}"
                updates.append(error_msg)
                print(f"   {error_msg}")
                self.results['errors'].append(error_msg)
        
        return updates
    
    def update_requirements(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ requirements.txt"""
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt...")
        
        try:
            cmd = [
                'bash', '-c',
                f'source {self.venv_path}/bin/activate && pip freeze > requirements.txt'
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
            
            if result.returncode == 0:
                print("‚úÖ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω")
                self.results['updates'].append("requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements.txt: {result.stderr}"
                print(error_msg)
                self.results['errors'].append(error_msg)
                
        except Exception as e:
            error_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ requirements.txt: {e}"
            print(error_msg)
            self.results['errors'].append(error_msg)
    
    def run_security_tests(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            cmd = [
                'bash', '-c',
                f'source {self.venv_path}/bin/activate && python -m pytest tests/unit/security/ -v'
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
            
            if result.returncode == 0:
                print("‚úÖ –¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
                self.results['updates'].append("–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
            else:
                print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏: {result.stdout}")
                self.results['updates'].append("–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã")
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}"
            print(error_msg)
            self.results['errors'].append(error_msg)
    
    def generate_security_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        cmd = [
            'bash', '-c',
            f'source {self.venv_path}/bin/activate && python scripts/security_check.py'
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, cwd=self.project_root)
            
            if result.returncode == 0:
                print("‚úÖ –û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                self.results['updates'].append("–û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {result.stderr}")
                
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
            print(error_msg)
            self.results['errors'].append(error_msg)
    
    def run_full_update(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üõ°Ô∏è  –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
        print("=" * 60)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        safety_result = self.run_safety_check()
        vulnerabilities = safety_result.get('vulnerabilities', [])
        self.results['vulnerabilities_found'] = len(vulnerabilities)
        
        # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
        if vulnerabilities:
            updates = self.update_packages(vulnerabilities)
            self.results['updates'].extend(updates)
            self.results['vulnerabilities_fixed'] = len([u for u in updates if u.startswith('‚úÖ')])
        
        # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt
        self.update_requirements()
        
        # 4. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.run_security_tests()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_security_report()
        
        # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.save_results()
        
        # 7. –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
        self.print_summary()
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        report_file = self.project_root / 'security_update_report.json'
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –û—Ç—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏"""
        print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø")
        print("=" * 60)
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {self.results['vulnerabilities_found']}")
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {self.results['vulnerabilities_fixed']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len([u for u in self.results['updates'] if u.startswith('‚úÖ')])}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(self.results['errors'])}")
        
        if self.results['errors']:
            print("\nüö® –û–®–ò–ë–ö–ò:")
            for error in self.results['errors']:
                print(f"   {error}")
        
        if self.results['updates']:
            print("\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
            for update in self.results['updates']:
                print(f"   {update}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    updater = SecurityUpdater()
    updater.run_full_update()


if __name__ == "__main__":
    main()
