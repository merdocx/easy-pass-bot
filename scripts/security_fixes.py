#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
import os
import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

class SecurityFixes:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.src_path = self.project_root / 'src' / 'easy_pass_bot'
        self.fixes_applied = []
    
    def fix_logging_issues(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
        
        # –§–∞–π–ª—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        files_to_fix = [
            'src/easy_pass_bot/features/confirmation.py',
            'src/easy_pass_bot/services/cache_service.py'
        ]
        
        for file_path in files_to_fix:
            full_path = self.project_root / file_path
            if full_path.exists():
                try:
                    with open(full_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –ª–æ–≥–∏
                    original_content = content
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    content = content.replace(
                        'logger.info(f"',
                        'logger.info("'
                    )
                    content = content.replace(
                        'logger.error(f"',
                        'logger.error("'
                    )
                    content = content.replace(
                        'logger.warning(f"',
                        'logger.warning("'
                    )
                    
                    if content != original_content:
                        with open(full_path, 'w', encoding='utf-8') as f:
                            f.write(content)
                        self.fixes_applied.append(f"Fixed logging in {file_path}")
                        print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                    else:
                        print(f"   ‚ÑπÔ∏è  –§–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ {file_path}: {e}")
    
    def add_missing_validation(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ resident_handlers.py
        resident_handlers = self.src_path / 'handlers' / 'resident_handlers.py'
        if resident_handlers.exists():
            try:
                with open(resident_handlers, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                if 'from ..security.validator import validator' not in content:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
                    import_line = 'from ..security.validator import validator\nfrom ..security.rate_limiter import rate_limiter\n'
                    
                    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
                    lines = content.split('\n')
                    import_index = 0
                    for i, line in enumerate(lines):
                        if line.startswith('from ') or line.startswith('import '):
                            import_index = i + 1
                    
                    lines.insert(import_index, import_line)
                    content = '\n'.join(lines)
                    
                    with open(resident_handlers, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    self.fixes_applied.append("Added validation imports to resident_handlers.py")
                    print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ resident_handlers.py")
                else:
                    print("   ‚ÑπÔ∏è  –í–∞–ª–∏–¥–∞—Ü–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ resident_handlers.py")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ resident_handlers.py: {e}")
    
    def add_missing_auth_checks(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ resident_handlers.py
        resident_handlers = self.src_path / 'handlers' / 'resident_handlers.py'
        if resident_handlers.exists():
            try:
                with open(resident_handlers, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
                if 'async def' in content and 'is_resident' not in content:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
                    auth_function = '''
async def is_resident(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–∏—Ç–µ–ª–µ–º"""
    from ..database import db
    from ..config import ROLES, USER_STATUSES
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user.role == ROLES['RESIDENT'] and user.status == USER_STATUSES['APPROVED']

'''
                    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
                    lines = content.split('\n')
                    insert_index = 0
                    for i, line in enumerate(lines):
                        if line.startswith('router = Router()'):
                            insert_index = i
                            break
                    
                    lines.insert(insert_index, auth_function)
                    content = '\n'.join(lines)
                    
                    with open(resident_handlers, 'w', encoding='utf-8') as f:
                        f.write(content)
                    
                    self.fixes_applied.append("Added auth checks to resident_handlers.py")
                    print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ resident_handlers.py")
                else:
                    print("   ‚ÑπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ resident_handlers.py")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    def create_security_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        security_config = '''"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Easy Pass Bot
"""
import os
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
SECURITY_CONFIG = {
    # Rate limiting
    'RATE_LIMIT_MAX_REQUESTS': int(os.getenv('RATE_LIMIT_MAX_REQUESTS', '15')),
    'RATE_LIMIT_WINDOW_SECONDS': int(os.getenv('RATE_LIMIT_WINDOW_SECONDS', '60')),
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    'MAX_CAR_NUMBER_LENGTH': 20,
    'MAX_NAME_LENGTH': 100,
    'MAX_PHONE_LENGTH': 20,
    'MAX_APARTMENT_LENGTH': 10,
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    'SESSION_TIMEOUT_MINUTES': 30,
    'MAX_LOGIN_ATTEMPTS': 5,
    'LOCKOUT_DURATION_MINUTES': 15,
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    'LOG_SENSITIVE_DATA': False,
    'AUDIT_LOG_RETENTION_DAYS': 90,
    
    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    'ENCRYPTION_KEY_LENGTH': 32,
    'HASH_ALGORITHM': 'sha256',
    'SALT_LENGTH': 16,
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    'SECURITY_ALERT_THRESHOLD': 10,
    'MONITORING_INTERVAL_SECONDS': 300,
    
    # –§–∞–π–ª—ã
    'ALLOWED_FILE_EXTENSIONS': ['.jpg', '.jpeg', '.png', '.pdf'],
    'MAX_FILE_SIZE_MB': 5,
    'UPLOAD_DIR': 'uploads',
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    'DB_CONNECTION_TIMEOUT': 30,
    'DB_QUERY_TIMEOUT': 10,
    'DB_MAX_CONNECTIONS': 10,
    
    # API
    'API_RATE_LIMIT_PER_MINUTE': 100,
    'API_TIMEOUT_SECONDS': 30,
    'CORS_ALLOWED_ORIGINS': ['*'],
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    'NOTIFICATION_RETRY_ATTEMPTS': 3,
    'NOTIFICATION_TIMEOUT_SECONDS': 30,
    'ADMIN_NOTIFICATION_ENABLED': True,
    
    # –ê—Ä—Ö–∏–≤–∞—Ü–∏—è
    'ARCHIVE_INTERVAL_HOURS': 6,
    'ARCHIVE_USED_PASSES_HOURS': 24,
    'ARCHIVE_UNUSED_PASSES_DAYS': 7,
    'ARCHIVE_CLEANUP_DAYS': 30
}

def get_security_config() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    return SECURITY_CONFIG.copy()

def is_secure_mode() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω –ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º"""
    return os.getenv('SECURE_MODE', 'false').lower() == 'true'

def get_encryption_key() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    key = os.getenv('ENCRYPTION_KEY')
    if not key:
        raise ValueError("ENCRYPTION_KEY environment variable is required")
    if len(key) != 32:
        raise ValueError("ENCRYPTION_KEY must be exactly 32 characters long")
    return key
'''
        
        config_file = self.src_path / 'security' / 'config.py'
        config_file.parent.mkdir(exist_ok=True)
        
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(security_config)
        
        self.fixes_applied.append("Created security configuration")
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    def create_security_middleware(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ security middleware...")
        
        middleware_code = '''"""
Security middleware –¥–ª—è Easy Pass Bot
"""
import time
import logging
from typing import Callable, Any
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from .rate_limiter import rate_limiter
from .validator import validator
from .audit_logger import audit_logger

logger = logging.getLogger(__name__)

class SecurityMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, dict[str, Any]], Any],
        event: TelegramObject,
        data: dict[str, Any]
    ) -> Any:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ security middleware"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = None
        if hasattr(event, 'from_user') and event.from_user:
            user_id = event.from_user.id
        
        if user_id is None:
            logger.warning("Security middleware: No user ID found")
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
        if not await rate_limiter.is_allowed(user_id):
            logger.warning(f"Rate limit exceeded for user {user_id}")
            if hasattr(event, 'answer'):
                await event.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram ID
        is_valid, error = validator.validate_telegram_id(user_id)
        if not is_valid:
            logger.warning(f"Invalid Telegram ID: {user_id}, error: {error}")
            if hasattr(event, 'answer'):
                await event.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        audit_logger.log_user_action(user_id, "request", {
            "event_type": type(event).__name__,
            "timestamp": time.time()
        })
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)

class InputValidationMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, dict[str, Any]], Any],
        event: TelegramObject,
        data: dict[str, Any]
    ) -> Any:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if hasattr(event, 'text') and event.text:
            is_valid, error = validator.validate_text(event.text)
            if not is_valid:
                logger.warning(f"Invalid text input: {error}")
                if hasattr(event, 'answer'):
                    await event.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥")
                return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è callback –¥–∞–Ω–Ω—ã—Ö
        if hasattr(event, 'data') and event.data:
            is_valid, error = validator.validate_callback_data(event.data)
            if not is_valid:
                logger.warning(f"Invalid callback data: {error}")
                if hasattr(event, 'answer'):
                    await event.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return
        
        return await handler(event, data)
'''
        
        middleware_file = self.src_path / 'security' / 'middleware.py'
        
        with open(middleware_file, 'w', encoding='utf-8') as f:
            f.write(middleware_code)
        
        self.fixes_applied.append("Created security middleware")
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω security middleware")
    
    def create_security_tests(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        test_code = '''"""
–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è Easy Pass Bot
"""
import pytest
import asyncio
from unittest.mock import Mock, patch
from ..security.validator import validator
from ..security.rate_limiter import rate_limiter
from ..security.audit_logger import audit_logger

class TestSecurityValidator:
    """–¢–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
    
    def test_validate_telegram_id_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ Telegram ID"""
        is_valid, error = validator.validate_telegram_id(123456789)
        assert is_valid
        assert error is None
    
    def test_validate_telegram_id_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ Telegram ID"""
        is_valid, error = validator.validate_telegram_id(-1)
        assert not is_valid
        assert "Invalid Telegram ID" in error
    
    def test_validate_car_number_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        is_valid, error = validator.validate_car_number("–ê123–ë–í77")
        assert is_valid
        assert error is None
    
    def test_validate_car_number_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        is_valid, error = validator.validate_car_number("")
        assert not is_valid
        assert "Car number is required" in error
    
    def test_validate_phone_number_valid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        is_valid, error = validator.validate_phone_number("+7 (999) 123-45-67")
        assert is_valid
        assert error is None
    
    def test_validate_phone_number_invalid(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        is_valid, error = validator.validate_phone_number("invalid")
        assert not is_valid
        assert "Invalid phone number" in error

class TestRateLimiter:
    """–¢–µ—Å—Ç—ã rate limiter"""
    
    @pytest.mark.asyncio
    async def test_rate_limiter_allows_requests(self):
        """–¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞"""
        user_id = 123456789
        
        # –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        for _ in range(5):
            is_allowed = await rate_limiter.is_allowed(user_id)
            assert is_allowed
    
    @pytest.mark.asyncio
    async def test_rate_limiter_blocks_excessive_requests(self):
        """–¢–µ—Å—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_id = 123456789
        
        # –î–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        for _ in range(20):
            await rate_limiter.is_allowed(user_id)
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
        is_allowed = await rate_limiter.is_allowed(user_id)
        assert not is_allowed

class TestAuditLogger:
    """–¢–µ—Å—Ç—ã –∞—É–¥–∏—Ç-–ª–æ–≥–≥–µ—Ä–∞"""
    
    def test_log_user_registration(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = 123456789
        user_data = {"full_name": "Test User"}
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        audit_logger.log_user_registration(user_id, user_data)
    
    def test_log_pass_creation(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞"""
        user_id = 123456789
        car_number = "–ê123–ë–í77"
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        audit_logger.log_pass_creation(user_id, car_number)
    
    def test_log_pass_usage(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞"""
        user_id = 123456789
        pass_id = 1
        car_number = "–ê123–ë–í77"
        used_by_id = 987654321
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        audit_logger.log_pass_usage(user_id, pass_id, car_number, used_by_id)

class TestSecurityIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    @pytest.mark.asyncio
    async def test_security_middleware_flow(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã security middleware"""
        from ..security.middleware import SecurityMiddleware
        
        middleware = SecurityMiddleware()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Å–æ–±—ã—Ç–∏–µ
        mock_event = Mock()
        mock_event.from_user.id = 123456789
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        mock_handler = Mock(return_value="success")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º middleware
        result = await middleware(mock_handler, mock_event, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_handler.assert_called_once()
        assert result == "success"
    
    def test_security_config_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        from ..security.config import get_security_config, is_secure_mode
        
        config = get_security_config()
        assert isinstance(config, dict)
        assert 'RATE_LIMIT_MAX_REQUESTS' in config
        assert 'MAX_CAR_NUMBER_LENGTH' in config
        
        # –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        secure_mode = is_secure_mode()
        assert isinstance(secure_mode, bool)
'''
        
        test_file = self.project_root / 'tests' / 'unit' / 'security' / 'test_security_fixes.py'
        test_file.parent.mkdir(parents=True, exist_ok=True)
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_code)
        
        self.fixes_applied.append("Created security tests")
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    
    def run_fixes(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        print("=" * 60)
        
        self.fix_logging_issues()
        self.add_missing_validation()
        self.add_missing_auth_checks()
        self.create_security_config()
        self.create_security_middleware()
        self.create_security_tests()
        
        print("\nüìä –°–í–û–î–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        print("=" * 60)
        print(f"–í—Å–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(self.fixes_applied)}")
        
        for fix in self.fixes_applied:
            print(f"‚úÖ {fix}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report = {
            'timestamp': datetime.now().isoformat(),
            'fixes_applied': self.fixes_applied,
            'total_fixes': len(self.fixes_applied)
        }
        
        report_file = self.project_root / 'security_fixes_report.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    fixer = SecurityFixes()
    fixer.run_fixes()


if __name__ == "__main__":
    main()
