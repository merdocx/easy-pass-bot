#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Easy Pass Bot
"""
import os
import sys
import subprocess
import json
import re
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

class SecurityChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.src_path = self.project_root / 'src' / 'easy_pass_bot'
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'checks': {},
            'summary': {
                'total_checks': 0,
                'passed': 0,
                'failed': 0,
                'warnings': 0
            }
        }
    
    def run_check(self, check_name: str, check_func) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {check_name}")
        try:
            result = check_func()
            self.results['checks'][check_name] = result
            self.results['summary']['total_checks'] += 1
            
            if result['status'] == 'PASS':
                self.results['summary']['passed'] += 1
                print(f"‚úÖ {check_name}: –ü–†–û–ô–î–ï–ù–û")
            elif result['status'] == 'WARNING':
                self.results['summary']['warnings'] += 1
                print(f"‚ö†Ô∏è  {check_name}: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï")
            else:
                self.results['summary']['failed'] += 1
                print(f"‚ùå {check_name}: –ù–ï –ü–†–û–ô–î–ï–ù–û")
            
            if result.get('details'):
                for detail in result['details']:
                    print(f"   - {detail}")
            
            return result
        except Exception as e:
            error_result = {
                'status': 'ERROR',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}',
                'details': []
            }
            self.results['checks'][check_name] = error_result
            self.results['summary']['total_checks'] += 1
            self.results['summary']['failed'] += 1
            print(f"üí• {check_name}: –û–®–ò–ë–ö–ê - {str(e)}")
            return error_result
    
    def check_hardcoded_secrets(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã"""
        secret_patterns = [
            r'BOT_TOKEN\s*=\s*["\'][^"\']+["\']',
            r'password\s*=\s*["\'][^"\']+["\']',
            r'secret\s*=\s*["\'][^"\']+["\']',
            r'api_key\s*=\s*["\'][^"\']+["\']',
            r'token\s*=\s*["\'][^"\']+["\']',
        ]
        
        issues = []
        for file_path in self.src_path.rglob('*.py'):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    for pattern in secret_patterns:
                        matches = re.findall(pattern, content, re.IGNORECASE)
                        for match in matches:
                            issues.append(f"{file_path}: {match}")
            except Exception:
                continue
        
        if issues:
            return {
                'status': 'FAIL',
                'message': f'–ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤',
                'details': issues[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            }
        else:
            return {
                'status': 'PASS',
                'message': '–ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                'details': []
            }
    
    def check_sql_injection(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        dangerous_patterns = [
            r'execute\s*\(\s*["\'].*%s.*["\']',
            r'execute\s*\(\s*f["\'].*{.*}.*["\']',
            r'execute\s*\(\s*["\'].*\+.*["\']',
            r'query\s*=\s*["\'].*\+.*["\']',
        ]
        
        issues = []
        for file_path in self.src_path.rglob('*.py'):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    for pattern in dangerous_patterns:
                        matches = re.findall(pattern, content, re.IGNORECASE | re.DOTALL)
                        for match in matches:
                            issues.append(f"{file_path}: {match}")
            except Exception:
                continue
        
        if issues:
            return {
                'status': 'FAIL',
                'message': f'–ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö SQL –∏–Ω—ä–µ–∫—Ü–∏–π',
                'details': issues[:10]
            }
        else:
            return {
                'status': 'PASS',
                'message': 'SQL –∏–Ω—ä–µ–∫—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã',
                'details': []
            }
    
    def check_input_validation(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        validation_files = [
            'security/validator.py',
            'services/validation_service.py'
        ]
        
        issues = []
        for file_name in validation_files:
            file_path = self.src_path / file_name
            if not file_path.exists():
                issues.append(f"–§–∞–π–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        handler_files = list(self.src_path.glob('handlers/*.py'))
        for handler_file in handler_files:
            try:
                with open(handler_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'validator' not in content.lower():
                        issues.append(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {handler_file.name}")
            except Exception:
                continue
        
        if issues:
            return {
                'status': 'WARNING',
                'message': f'–ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π',
                'details': issues
            }
        else:
            return {
                'status': 'PASS',
                'message': '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                'details': []
            }
    
    def check_authentication(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–æ–ª–µ–π
        handler_files = list(self.src_path.glob('handlers/*.py'))
        for handler_file in handler_files:
            try:
                with open(handler_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'is_admin' not in content and 'is_security' not in content:
                        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π –≤ {handler_file.name}")
            except Exception:
                continue
        
        if issues:
            return {
                'status': 'WARNING',
                'message': f'–ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π',
                'details': issues
            }
        else:
            return {
                'status': 'PASS',
                'message': '–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                'details': []
            }
    
    def check_logging(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—É–¥–∏—Ç-–ª–æ–≥–≥–µ—Ä–∞
        audit_file = self.src_path / 'security' / 'audit_logger.py'
        if not audit_file.exists():
            issues.append("–ê—É–¥–∏—Ç-–ª–æ–≥–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
        critical_files = [
            'handlers/admin_handlers.py',
            'handlers/security_handlers.py',
            'services/pass_service.py',
            'services/user_service.py'
        ]
        
        for file_name in critical_files:
            file_path = self.src_path / file_name
            if file_path.exists():
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if 'audit_logger' not in content:
                            issues.append(f"–ê—É–¥–∏—Ç-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {file_name}")
                except Exception:
                    continue
        
        if issues:
            return {
                'status': 'WARNING',
                'message': f'–ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º',
                'details': issues
            }
        else:
            return {
                'status': 'PASS',
                'message': '–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                'details': []
            }
    
    def check_rate_limiting(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        rate_limiter_file = self.src_path / 'security' / 'rate_limiter.py'
        if not rate_limiter_file.exists():
            return {
                'status': 'FAIL',
                'message': 'Rate limiter –Ω–µ –Ω–∞–π–¥–µ–Ω',
                'details': []
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ rate limiting –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        handler_files = list(self.src_path.glob('handlers/*.py'))
        usage_count = 0
        
        for handler_file in handler_files:
            try:
                with open(handler_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'rate_limiter' in content:
                        usage_count += 1
            except Exception:
                continue
        
        if usage_count == 0:
            return {
                'status': 'WARNING',
                'message': 'Rate limiting –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö',
                'details': []
            }
        else:
            return {
                'status': 'PASS',
                'message': f'Rate limiting –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ {usage_count} —Ñ–∞–π–ª–∞—Ö',
                'details': []
            }
    
    def check_dependencies(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º safety check
            result = subprocess.run(
                ['safety', 'check', '--json'],
                capture_output=True,
                text=True,
                cwd=self.project_root
            )
            
            if result.returncode == 0:
                return {
                    'status': 'PASS',
                    'message': '–£—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                    'details': []
                }
            else:
                try:
                    vulnerabilities = json.loads(result.stdout)
                    return {
                        'status': 'FAIL',
                        'message': f'–ù–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö',
                        'details': [f"{v['package']}: {v['advisory']}" for v in vulnerabilities[:10]]
                    }
                except json.JSONDecodeError:
                    return {
                        'status': 'WARNING',
                        'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
                        'details': [result.stderr]
                    }
        except FileNotFoundError:
            return {
                'status': 'WARNING',
                'message': 'Safety –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install safety',
                'details': []
            }
    
    def check_file_permissions(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        config_files = [
            '.env',
            'database/easy_pass.db',
            'logs/',
        ]
        
        for file_name in config_files:
            file_path = self.project_root / file_name
            if file_path.exists():
                stat = file_path.stat()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ–º
                if stat.st_mode & 0o002:
                    issues.append(f"–§–∞–π–ª {file_name} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        if issues:
            return {
                'status': 'WARNING',
                'message': f'–ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞',
                'details': issues
            }
        else:
            return {
                'status': 'PASS',
                'message': '–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                'details': []
            }
    
    def check_environment_config(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
        env_file = self.project_root / '.env'
        if not env_file.exists():
            issues.append(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.example
        env_example = self.project_root / '.env.example'
        if not env_example.exists():
            issues.append(".env.example —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ .env –Ω–µ –≤ git
        gitignore = self.project_root / '.gitignore'
        if gitignore.exists():
            with open(gitignore, 'r') as f:
                content = f.read()
                if '.env' not in content:
                    issues.append(".env –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore")
        
        if issues:
            return {
                'status': 'WARNING',
                'message': f'–ù–∞–π–¥–µ–Ω–æ {len(issues)} –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è',
                'details': issues
            }
        else:
            return {
                'status': 'PASS',
                'message': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                'details': []
            }
    
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üõ°Ô∏è  –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Easy Pass Bot")
        print("=" * 50)
        
        checks = [
            ("hardcoded_secrets", self.check_hardcoded_secrets),
            ("sql_injection", self.check_sql_injection),
            ("input_validation", self.check_input_validation),
            ("authentication", self.check_authentication),
            ("logging", self.check_logging),
            ("rate_limiting", self.check_rate_limiting),
            ("dependencies", self.check_dependencies),
            ("file_permissions", self.check_file_permissions),
            ("environment_config", self.check_environment_config),
        ]
        
        for check_name, check_func in checks:
            self.run_check(check_name, check_func)
            print()
        
        self.print_summary()
        self.save_report()
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("=" * 50)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 50)
        
        summary = self.results['summary']
        total = summary['total_checks']
        passed = summary['passed']
        failed = summary['failed']
        warnings = summary['warnings']
        
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings}")
        
        if failed == 0 and warnings == 0:
            print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        elif failed == 0:
            print(f"\n‚ö†Ô∏è  –ï—Å—Ç—å {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        else:
            print(f"\nüö® –ù–∞–π–¥–µ–Ω–æ {failed} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        report_file = self.project_root / 'security_report.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = SecurityChecker()
    checker.run_all_checks()


if __name__ == "__main__":
    main()


