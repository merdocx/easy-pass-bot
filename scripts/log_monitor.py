#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ Easy Pass Bot
"""
import os
import sys
import json
import time
import re
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

class LogMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ª–æ–≥–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, log_dir: str = "logs", alert_threshold: int = 10):
        self.log_dir = Path(log_dir)
        self.alert_threshold = alert_threshold
        self.monitoring = False
        self.alerts = []
        self.stats = {
            'total_events': 0,
            'security_events': 0,
            'error_events': 0,
            'warning_events': 0,
            'last_check': None
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.patterns = {
            'security': [
                r'Rate limit exceeded',
                r'Invalid Telegram ID',
                r'Unauthorized access',
                r'Security violation',
                r'Failed authentication',
                r'SQL injection attempt',
                r'XSS attempt',
                r'Path traversal attempt'
            ],
            'errors': [
                r'ERROR',
                r'CRITICAL',
                r'Exception',
                r'Traceback',
                r'Failed to',
                r'Database error'
            ],
            'warnings': [
                r'WARNING',
                r'Deprecated',
                r'Slow query',
                r'Memory usage high'
            ]
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/log_monitor.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def scan_log_files(self) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º"""
        results = {
            'security_issues': [],
            'errors': [],
            'warnings': [],
            'stats': self.stats.copy()
        }
        
        if not self.log_dir.exists():
            self.logger.warning(f"Log directory {self.log_dir} does not exist")
            return results
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –ª–æ–≥-—Ñ–∞–π–ª—ã
        log_files = list(self.log_dir.glob("*.log"))
        
        for log_file in log_files:
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫
                recent_lines = lines[-1000:] if len(lines) > 1000 else lines
                
                for line_num, line in enumerate(recent_lines, 1):
                    timestamp = self._extract_timestamp(line)
                    if not timestamp:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    for pattern in self.patterns['security']:
                        if re.search(pattern, line, re.IGNORECASE):
                            results['security_issues'].append({
                                'file': log_file.name,
                                'line': line_num,
                                'timestamp': timestamp,
                                'message': line.strip(),
                                'pattern': pattern
                            })
                            self.stats['security_events'] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                    for pattern in self.patterns['errors']:
                        if re.search(pattern, line, re.IGNORECASE):
                            results['errors'].append({
                                'file': log_file.name,
                                'line': line_num,
                                'timestamp': timestamp,
                                'message': line.strip(),
                                'pattern': pattern
                            })
                            self.stats['error_events'] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    for pattern in self.patterns['warnings']:
                        if re.search(pattern, line, re.IGNORECASE):
                            results['warnings'].append({
                                'file': log_file.name,
                                'line': line_num,
                                'timestamp': timestamp,
                                'message': line.strip(),
                                'pattern': pattern
                            })
                            self.stats['warning_events'] += 1
                    
                    self.stats['total_events'] += 1
                
            except Exception as e:
                self.logger.error(f"Error reading log file {log_file}: {e}")
        
        self.stats['last_check'] = datetime.now().isoformat()
        results['stats'] = self.stats.copy()
        
        return results
    
    def _extract_timestamp(self, line: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        patterns = [
            r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})',
            r'(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})',
            r'(\d{2}/\d{2}/\d{4} \d{2}:\d{2}:\d{2})'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, line)
            if match:
                return match.group(1)
        
        return None
    
    def check_security_alerts(self, results: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_count = len(results['security_issues'])
        if security_count > self.alert_threshold:
            alerts.append({
                'type': 'high_security_activity',
                'severity': 'high',
                'message': f'High security activity detected: {security_count} events',
                'count': security_count,
                'threshold': self.alert_threshold
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        suspicious_patterns = [
            'SQL injection attempt',
            'XSS attempt',
            'Path traversal attempt',
            'Unauthorized access'
        ]
        
        for issue in results['security_issues']:
            for pattern in suspicious_patterns:
                if pattern.lower() in issue['message'].lower():
                    alerts.append({
                        'type': 'suspicious_activity',
                        'severity': 'critical',
                        'message': f'Suspicious activity detected: {pattern}',
                        'file': issue['file'],
                        'line': issue['line'],
                        'timestamp': issue['timestamp']
                    })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        error_count = len(results['errors'])
        if error_count > 50:  # –ë–æ–ª–µ–µ 50 –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
            alerts.append({
                'type': 'high_error_rate',
                'severity': 'medium',
                'message': f'High error rate detected: {error_count} errors',
                'count': error_count
            })
        
        return alerts
    
    def generate_report(self, results: Dict[str, Any], alerts: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ"""
        report = f"""
üîç –û–¢–ß–ï–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –õ–û–ì–û–í
{'=' * 50}
–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {results['stats']['total_events']}
‚Ä¢ –°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {results['stats']['security_events']}
‚Ä¢ –û—à–∏–±–∫–∏: {results['stats']['error_events']}
‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {results['stats']['warning_events']}

üö® –ê–õ–ï–†–¢–´ ({len(alerts)}):
"""
        
        if alerts:
            for i, alert in enumerate(alerts, 1):
                severity_emoji = {
                    'critical': 'üî¥',
                    'high': 'üü†',
                    'medium': 'üü°',
                    'low': 'üü¢'
                }.get(alert['severity'], '‚ö™')
                
                report += f"{i}. {severity_emoji} {alert['message']}\n"
                if 'file' in alert:
                    report += f"   –§–∞–π–ª: {alert['file']}:{alert.get('line', 'N/A')}\n"
                if 'timestamp' in alert:
                    report += f"   –í—Ä–µ–º—è: {alert['timestamp']}\n"
                report += "\n"
        else:
            report += "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
        
        # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if results['security_issues']:
            report += "\nüîí –¢–û–ü –ü–†–û–ë–õ–ï–ú –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:\n"
            security_issues = results['security_issues'][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
            for issue in security_issues:
                report += f"‚Ä¢ {issue['timestamp']} - {issue['message'][:100]}...\n"
        
        return report
    
    def save_alerts(self, alerts: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        if not alerts:
            return
        
        alert_file = self.log_dir / 'security_alerts.json'
        alert_data = {
            'timestamp': datetime.now().isoformat(),
            'alerts': alerts
        }
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–ª–µ—Ä—Ç—ã
        existing_alerts = []
        if alert_file.exists():
            try:
                with open(alert_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
                    existing_alerts = existing_data.get('alerts', [])
            except Exception as e:
                self.logger.error(f"Error reading existing alerts: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
        all_alerts = existing_alerts + alerts
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∞–ª–µ—Ä—Ç–æ–≤
        all_alerts = all_alerts[-100:]
        
        with open(alert_file, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'alerts': all_alerts
            }, f, ensure_ascii=False, indent=2)
    
    async def start_monitoring(self, interval: int = 300):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring = True
        self.logger.info(f"Starting log monitoring with {interval}s interval")
        
        while self.monitoring:
            try:
                # –°–∫–∞–Ω–∏—Ä—É–µ–º –ª–æ–≥–∏
                results = self.scan_log_files()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–ª–µ—Ä—Ç—ã
                alerts = self.check_security_alerts(results)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç—ã
                if alerts:
                    self.save_alerts(alerts)
                    self.logger.warning(f"Generated {len(alerts)} security alerts")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                report = self.generate_report(results, alerts)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
                report_file = self.log_dir / f'monitoring_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.txt'
                with open(report_file, 'w', encoding='utf-8') as f:
                    f.write(report)
                
                self.logger.info(f"Monitoring cycle completed. Events: {results['stats']['total_events']}")
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
                await asyncio.sleep(interval)
                
            except Exception as e:
                self.logger.error(f"Error in monitoring cycle: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring = False
        self.logger.info("Log monitoring stopped")
    
    def run_single_check(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤...")
        
        results = self.scan_log_files()
        alerts = self.check_security_alerts(results)
        
        if alerts:
            self.save_alerts(alerts)
            print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!")
        else:
            print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        report = self.generate_report(results, alerts)
        print(report)
        
        return results, alerts


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Log Monitor for Easy Pass Bot')
    parser.add_argument('--log-dir', default='logs', help='Log directory path')
    parser.add_argument('--interval', type=int, default=300, help='Monitoring interval in seconds')
    parser.add_argument('--threshold', type=int, default=10, help='Alert threshold for security events')
    parser.add_argument('--once', action='store_true', help='Run single check instead of continuous monitoring')
    
    args = parser.parse_args()
    
    monitor = LogMonitor(log_dir=args.log_dir, alert_threshold=args.threshold)
    
    if args.once:
        monitor.run_single_check()
    else:
        try:
            asyncio.run(monitor.start_monitoring(args.interval))
        except KeyboardInterrupt:
            monitor.stop_monitoring()
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    main()

