#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
"""

import sqlite3
import random
from datetime import datetime, timedelta
from typing import List, Tuple

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "/root/easy_pass_bot/database/easy_pass.db"

# –°–ø–∏—Å–æ–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
CAR_NUMBERS = [
    "–ê123–ë–í777", "–í456–ì–î123", "–ï789–ñ–ó456", "–ö012–õ–ú789", "–ù345–û–ü012",
    "–†678–°–¢345", "–£901–§–•678", "–¶234–®–©901", "–Æ567–≠–Æ234", "–Ø890–ê–ë567",
    "–ê111–ê–ê777", "–í222–í–í123", "–ï333–ï–ï456", "–ö444–ö–ö789", "–ù555–ù–ù012",
    "–†666–†–†345", "–£777–£–£678", "–¶888–¶–¶901", "–Æ999–Æ–Æ234", "–Ø000–Ø–Ø567",
    "–ê777–ê–ê199", "–í123–í–í777", "–ï456–ï–ï199", "–ö789–ö–ö777", "–ù012–ù–ù199",
    "–†345–†–†777", "–£678–£–£199", "–¶901–¶–¶777", "–Æ234–Æ–Æ199", "–Ø567–Ø–Ø777"
]

STATUSES = ['active', 'used', 'cancelled']
STATUS_WEIGHTS = [0.6, 0.3, 0.1]  # 60% –∞–∫—Ç–∏–≤–Ω—ã—Ö, 30% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö, 10% –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö

def get_connection():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    return sqlite3.connect(DB_PATH)

def get_all_users() -> List[Tuple]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, full_name, role FROM users WHERE status = 'approved'")
    users = cursor.fetchall()
    conn.close()
    return users

def generate_car_number() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    return random.choice(CAR_NUMBERS)

def generate_created_date() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π)"""
    now = datetime.now()
    days_ago = random.randint(0, 90)
    created_date = now - timedelta(days=days_ago)
    return created_date.strftime("%Y-%m-%d %H:%M:%S")

def generate_used_date(created_date: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–ø–æ—Å–ª–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è)"""
    created = datetime.strptime(created_date, "%Y-%m-%d %H:%M:%S")
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1-30 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    days_after = random.randint(1, 30)
    used_date = created + timedelta(days=days_after)
    return used_date.strftime("%Y-%m-%d %H:%M:%S")

def get_random_user_for_usage(all_users: List[Tuple]) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—è used_by_id"""
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é 'security' –∏–ª–∏ 'admin'
    security_users = [user[0] for user in all_users if user[2] in ['security', 'admin']]
    if security_users:
        return random.choice(security_users)
    # –ï—Å–ª–∏ –Ω–µ—Ç security/admin, –≤—ã–±–∏—Ä–∞–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return random.choice(all_users)[0]

def create_pass(user_id: int, car_number: str, status: str, created_at: str, 
                used_at: str = None, used_by_id: int = None) -> str:
    """–°–æ–∑–¥–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞"""
    if status == 'used' and used_at is None:
        used_at = generate_used_date(created_at)
    
    if status == 'used' and used_by_id is None:
        users = get_all_users()
        used_by_id = get_random_user_for_usage(users)
    
    sql = """
    INSERT INTO passes (user_id, car_number, status, created_at, used_at, used_by_id, is_archived)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    """
    return sql, (user_id, car_number, status, created_at, used_at, used_by_id, False)

def populate_passes(num_passes: int = 100):
    """–ù–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–∞–º–∏"""
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ {num_passes} –ø—Ä–æ–ø—É—Å–∫–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    if not users:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    conn = get_connection()
    cursor = conn.cursor()
    
    created_count = 0
    
    try:
        for i in range(num_passes):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = random.choice(users)
            user_id = user[0]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞
            car_number = generate_car_number()
            status = random.choices(STATUSES, weights=STATUS_WEIGHTS)[0]
            created_at = generate_created_date()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            used_at = None
            used_by_id = None
            
            if status == 'used':
                used_at = generate_used_date(created_at)
                used_by_id = get_random_user_for_usage(users)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–ø—É—Å–∫
            sql, params = create_pass(user_id, car_number, status, created_at, used_at, used_by_id)
            cursor.execute(sql, params)
            
            created_count += 1
            
            if created_count % 20 == 0:
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ {created_count}/{num_passes} –ø—Ä–æ–ø—É—Å–∫–æ–≤...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {created_count} –ø—Ä–æ–ø—É—Å–∫–æ–≤!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        show_statistics(cursor)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {e}")
        conn.rollback()
    finally:
        conn.close()

def show_statistics(cursor):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cursor.execute("SELECT COUNT(*) FROM passes")
    total = cursor.fetchone()[0]
    print(f"   –í—Å–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {total}")
    
    # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
    cursor.execute("SELECT status, COUNT(*) FROM passes GROUP BY status")
    for status, count in cursor.fetchall():
        print(f"   {status}: {count}")
    
    # –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ø 5)
    cursor.execute("""
        SELECT u.full_name, COUNT(p.id) as pass_count 
        FROM users u 
        JOIN passes p ON u.id = p.user_id 
        GROUP BY u.id, u.full_name 
        ORDER BY pass_count DESC 
        LIMIT 5
    """)
    print("\nüèÜ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–ø—É—Å–∫–æ–≤:")
    for name, count in cursor.fetchall():
        print(f"   {name}: {count} –ø—Ä–æ–ø—É—Å–∫–æ–≤")
    
    # –ê—Ä—Ö–∏–≤–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏
    cursor.execute("SELECT COUNT(*) FROM passes WHERE is_archived = 1")
    archived = cursor.fetchone()[0]
    print(f"\nüì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤: {archived}")

def clear_all_passes():
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_connection()
    cursor = conn.cursor()
    
    try:
        cursor.execute("DELETE FROM passes")
        conn.commit()
        print("üóëÔ∏è –í—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {e}")
        conn.rollback()
    finally:
        conn.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üóÑÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–ª—è Easy Pass Bot")
    print("=" * 50)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –°–æ–∑–¥–∞—Ç—å 50 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤")
        print("2. –°–æ–∑–¥–∞—Ç—å 100 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤")
        print("3. –°–æ–∑–¥–∞—Ç—å 200 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤")
        print("4. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
        print("5. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        print("6. –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()
        
        if choice == "1":
            populate_passes(50)
        elif choice == "2":
            populate_passes(100)
        elif choice == "3":
            populate_passes(200)
        elif choice == "4":
            try:
                num = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: "))
                if num > 0:
                    populate_passes(num)
                else:
                    print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        elif choice == "5":
            conn = get_connection()
            cursor = conn.cursor()
            show_statistics(cursor)
            conn.close()
        elif choice == "6":
            confirm = input("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–æ–ø—É—Å–∫–∏? (yes/no): ")
            if confirm.lower() in ['yes', 'y', '–¥–∞', '–¥']:
                clear_all_passes()
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()

