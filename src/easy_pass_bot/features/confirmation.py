"""
–°–µ—Ä–≤–∏—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
"""
import asyncio
import logging
from typing import Dict, Any, Optional, Callable
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
logger = logging.getLogger(__name__)

class ConfirmationService:
    """–°–µ—Ä–≤–∏—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    def __init__(self, timeout: int = 300):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        Args:
            timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.timeout = timeout
        self.pending_confirmations: Dict[str, Dict[str, Any]] = {}
        self.confirmation_logger = logging.getLogger('confirmation')
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        self._cleanup_task = None
        # –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    def _start_cleanup_task(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        if self._cleanup_task is None or self._cleanup_task.done():
            try:
                self._cleanup_task = asyncio.create_task(self._cleanup_expired_confirmations())
            except RuntimeError:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, –∑–∞–ø—É—Å—Ç–∏–º –ø–æ–∑–∂–µ
                self.confirmation_logger.debug("No event loop available for cleanup task")
    async def _cleanup_expired_confirmations(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        while True:
            try:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                current_time = datetime.utcnow()
                expired_keys = []
                for key, data in self.pending_confirmations.items():
                    if current_time - data['created_at'] > timedelta(seconds=self.timeout):
                        expired_keys.append(key)
                for key in expired_keys:
                    del self.pending_confirmations[key]
                    self.confirmation_logger.debug(f"Expired confirmation: {key}")
                if expired_keys:
                    self.confirmation_logger.info(f"Cleaned up {len(expired_keys)} expired confirmations")
            except Exception as e:
                self.confirmation_logger.error(f"Error in confirmation cleanup: {e}")
    def create_confirmation_keyboard(self, action: str, confirmation_id: str,
                                   confirm_text: str = "‚úÖ –î–∞",
                                   cancel_text: str = "‚ùå –ù–µ—Ç") -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            cancel_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        """
        builder = InlineKeyboardBuilder()
        builder.button(
            text=confirm_text,
            callback_data=f"confirm_{action}_{confirmation_id}"
        )
        builder.button(
            text=cancel_text,
            callback_data=f"cancel_{action}_{confirmation_id}"
        )
        builder.adjust(2)
        return builder.as_markup()
    def create_dangerous_action_keyboard(self, action: str, confirmation_id: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        """
        return self.create_confirmation_keyboard(
            action, confirmation_id,
            confirm_text="‚ö†Ô∏è –î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
            cancel_text="‚úÖ –û—Ç–º–µ–Ω–∞"
        )
    def create_double_confirmation_keyboard(self, action: str, confirmation_id: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–≤–æ–π–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–≤–æ–π–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        """
        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=f"confirm_{action}_{confirmation_id}"
        )
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"cancel_{action}_{confirmation_id}"
        )
        builder.button(
            text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å",
            callback_data=f"edit_{action}_{confirmation_id}"
        )
        builder.adjust(1)
        return builder.as_markup()
    def register_confirmation(self, confirmation_id: str, action: str,
                            data: Dict[str, Any], callback: Callable) -> str:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        Args:
            confirmation_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            action: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback
            callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        Returns:
            ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        """
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        if self._cleanup_task is None:
            self._start_cleanup_task()
        self.pending_confirmations[confirmation_id] = {
            'action': action,
            'data': data,
            'callback': callback,
            'created_at': datetime.utcnow(),
            'status': 'pending'
        }
        self.confirmation_logger.debug(f"Registered confirmation: {confirmation_id} for action: {action}")
        return confirmation_id
    async def handle_confirmation(self, confirmation_id: str, action: str,
                                confirmed: bool) -> Optional[Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        Args:
            confirmation_id: ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            action: –î–µ–π—Å—Ç–≤–∏–µ
            confirmed: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è callback –∏–ª–∏ None
        """
        if confirmation_id not in self.pending_confirmations:
            self.confirmation_logger.warning(f"Confirmation not found: {confirmation_id}")
            return None
        confirmation_data = self.pending_confirmations[confirmation_id]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        if confirmation_data['action'] != action:
            self.confirmation_logger.warning(
                f"Action mismatch for confirmation {confirmation_id}: "
                f"expected {action}, got {confirmation_data['action']}"
            )
            return None
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        confirmation_data['status'] = 'confirmed' if confirmed else 'cancelled'
        confirmation_data['processed_at'] = datetime.utcnow()
        if confirmed:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º callback
                callback = confirmation_data['callback']
                data = confirmation_data['data']
                if asyncio.iscoroutinefunction(callback):
                    result = await callback(data)
                else:
                    result = callback(data)
                self.confirmation_logger.info(f"Confirmation executed: {confirmation_id}")
                return result
            except Exception as e:
                self.confirmation_logger.error(f"Error executing confirmation {confirmation_id}: {e}")
                raise
        else:
            self.confirmation_logger.info(f"Confirmation cancelled: {confirmation_id}")
            return None
    def get_confirmation_status(self, confirmation_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        Args:
            confirmation_id: ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∏–ª–∏ None
        """
        if confirmation_id not in self.pending_confirmations:
            return None
        data = self.pending_confirmations[confirmation_id]
        return {
            'action': data['action'],
            'status': data['status'],
            'created_at': data['created_at'].isoformat(),
            'processed_at': data.get('processed_at', {}).isoformat() if data.get('processed_at') else None
        }
    def cancel_confirmation(self, confirmation_id: str) -> bool:
        """
        –û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        Args:
            confirmation_id: ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ
        """
        if confirmation_id in self.pending_confirmations:
            del self.pending_confirmations[confirmation_id]
            self.confirmation_logger.info(f"Confirmation cancelled: {confirmation_id}")
            return True
        return False
    def get_pending_confirmations(self) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ–∂–∏–¥–∞—é—â–∏–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
        """
        return {
            key: {
                'action': data['action'],
                'created_at': data['created_at'].isoformat(),
                'status': data['status']
            }
            for key, data in self.pending_confirmations.items()
        }
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_confirmations = len(self.pending_confirmations)
        confirmed_count = sum(1 for data in self.pending_confirmations.values()
                            if data['status'] == 'confirmed')
        cancelled_count = sum(1 for data in self.pending_confirmations.values()
                            if data['status'] == 'cancelled')
        pending_count = sum(1 for data in self.pending_confirmations.values()
                          if data['status'] == 'pending')
        return {
            'total_confirmations': total_confirmations,
            'confirmed': confirmed_count,
            'cancelled': cancelled_count,
            'pending': pending_count,
            'confirmation_rate': confirmed_count / max(total_confirmations, 1)
        }
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"""
        if hasattr(self, '_cleanup_task') and not self._cleanup_task.done():
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
confirmation_service = ConfirmationService()
