"""
–°–µ—Ä–≤–∏—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
"""
import logging
from typing import Dict, Any, Optional, List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
logger = logging.getLogger(__name__)

class NavigationService:
    """–°–µ—Ä–≤–∏—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —Ö–ª–µ–±–Ω—ã–º–∏ –∫—Ä–æ—à–∫–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π"""
    def __init__(self):
        self.user_history: Dict[int, List[str]] = {}
        self.nav_logger = logging.getLogger('navigation')
    def add_to_history(self, user_id: int, page: str, context: Optional[Dict[str, Any]] = None):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            page: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        """
        if user_id not in self.user_history:
            self.user_history[user_id] = []
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        if len(self.user_history[user_id]) >= 10:
            self.user_history[user_id].pop(0)
        self.user_history[user_id].append(page)
        self.nav_logger.debug(f"Added to history for user {user_id}: {page}")
    def get_history(self, user_id: int) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∏—Å—Ç–æ—Ä–∏–∏
        """
        return self.user_history.get(user_id, [])
    def get_previous_page(self, user_id: int) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ None
        """
        history = self.get_history(user_id)
        if len(history) >= 2:
            return history[-2]
        return None
    def clear_history(self, user_id: int):
        """
        –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.user_history:
            del self.user_history[user_id]
            self.nav_logger.debug(f"Cleared history for user {user_id}")
    def create_breadcrumb_keyboard(self, current_page: str, user_id: int,
                                 additional_buttons: Optional[List[Dict[str, str]]] = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ö–ª–µ–±–Ω—ã–º–∏ –∫—Ä–æ—à–∫–∞–º–∏
        Args:
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            additional_buttons: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        """
        builder = InlineKeyboardBuilder()
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è
        history = self.get_history(user_id)
        if len(history) > 1:
            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="nav_back")
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–∞—è"
        if current_page != "main":
            builder.button(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="nav_main")
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if additional_buttons:
            for button in additional_buttons:
                builder.button(
                    text=button['text'],
                    callback_data=button['callback_data']
                )
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
        builder.adjust(2)
        return builder.as_markup()
    def create_pagination_keyboard(self, current_page: int, total_pages: int,
                                 base_callback: str, **kwargs) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        Args:
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            base_callback: –ë–∞–∑–æ–≤—ã–π callback –¥–ª—è –∫–Ω–æ–ø–æ–∫
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è callback
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        """
        builder = InlineKeyboardBuilder()
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if current_page > 1:
            prev_callback = f"{base_callback}_page_{current_page - 1}"
            for key, value in kwargs.items():
                prev_callback += f"_{key}_{value}"
            builder.button(text="‚óÄÔ∏è", callback_data=prev_callback)
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        builder.button(text=f"{current_page}/{total_pages}", callback_data="noop")
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if current_page < total_pages:
            next_callback = f"{base_callback}_page_{current_page + 1}"
            for key, value in kwargs.items():
                next_callback += f"_{key}_{value}"
            builder.button(text="‚ñ∂Ô∏è", callback_data=next_callback)
        builder.adjust(3)
        return builder.as_markup()
    def create_quick_actions_keyboard(self, actions: List[Dict[str, str]]) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        Args:
            actions: –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º –∏ callback_data
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        """
        builder = InlineKeyboardBuilder()
        for action in actions:
            builder.button(
                text=action['text'],
                callback_data=action['callback_data']
            )
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
        builder.adjust(2)
        return builder.as_markup()
    def create_tab_keyboard(self, tabs: List[Dict[str, str]], active_tab: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        Args:
            tabs: –°–ø–∏—Å–æ–∫ –≤–∫–ª–∞–¥–æ–∫
            active_tab: –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        """
        builder = InlineKeyboardBuilder()
        for tab in tabs:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            text = tab['text']
            if tab['id'] == active_tab:
                text = f"üîπ {text}"
            else:
                text = f"‚ö™ {text}"
            builder.button(
                text=text,
                callback_data=tab['callback_data']
            )
        builder.adjust(1)
        return builder.as_markup()
    def get_navigation_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_users = len(self.user_history)
        total_pages = sum(len(history) for history in self.user_history.values())
        return {
            'total_users_with_history': total_users,
            'total_page_visits': total_pages,
            'average_pages_per_user': total_pages / max(total_users, 1),
            'most_common_pages': self._get_most_common_pages()
        }
    def _get_most_common_pages(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –ø–æ—Å–µ—â–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"""
        page_counts = {}
        for history in self.user_history.values():
            for page in history:
                page_counts[page] = page_counts.get(page, 0) + 1
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        sorted_pages = sorted(page_counts.items(), key=lambda x: x[1], reverse=True)
        return [
            {'page': page, 'visits': count}
            for page, count in sorted_pages[:10]
        ]
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
navigation_service = NavigationService()
