"""
Unified configuration system for Easy Pass Bot
"""
import os
from typing import Dict, Any, Optional, List
from pydantic import Field, field_validator
from pydantic_settings import BaseSettings
from pathlib import Path


class Settings(BaseSettings):
    """Unified settings for Easy Pass Bot"""
    
    # Bot tokens
    resident_bot_token: str = Field(..., env="RESIDENT_BOT_TOKEN")
    security_bot_token: str = Field(..., env="SECURITY_BOT_TOKEN")
    
    # Database
    database_path: str = Field(default="database/easy_pass.db", env="DATABASE_PATH")
    
    # Security
    rate_limit_max_requests: int = Field(default=15, env="RATE_LIMIT_MAX_REQUESTS")
    rate_limit_window_seconds: int = Field(default=60, env="RATE_LIMIT_WINDOW_SECONDS")
    
    # Validation limits
    max_name_length: int = Field(default=50, env="MAX_NAME_LENGTH")
    max_phone_length: int = Field(default=20, env="MAX_PHONE_LENGTH")
    max_apartment_length: int = Field(default=10, env="MAX_APARTMENT_LENGTH")
    max_car_number_length: int = Field(default=15, env="MAX_CAR_NUMBER_LENGTH")
    
    # Cache settings
    cache_default_ttl: int = Field(default=300, env="CACHE_DEFAULT_TTL")
    cache_max_size: int = Field(default=1000, env="CACHE_MAX_SIZE")
    
    # Retry settings
    retry_max_attempts: int = Field(default=3, env="RETRY_MAX_ATTEMPTS")
    retry_base_delay: float = Field(default=1.0, env="RETRY_BASE_DELAY")
    retry_max_delay: float = Field(default=60.0, env="RETRY_MAX_DELAY")
    
    # Circuit breaker
    circuit_breaker_failure_threshold: int = Field(default=5, env="CIRCUIT_BREAKER_FAILURE_THRESHOLD")
    circuit_breaker_timeout: int = Field(default=30, env="CIRCUIT_BREAKER_TIMEOUT")
    circuit_breaker_success_threshold: int = Field(default=2, env="CIRCUIT_BREAKER_SUCCESS_THRESHOLD")
    
    # Analytics
    analytics_retention_days: int = Field(default=30, env="ANALYTICS_RETENTION_DAYS")
    analytics_batch_size: int = Field(default=100, env="ANALYTICS_BATCH_SIZE")
    
    # Confirmations
    confirmation_timeout: int = Field(default=300, env="CONFIRMATION_TIMEOUT")
    confirmation_cleanup_interval: int = Field(default=60, env="CONFIRMATION_CLEANUP_INTERVAL")
    
    # Logging
    log_level: str = Field(default="INFO", env="LOG_LEVEL")
    log_format: str = Field(default="json", env="LOG_FORMAT")  # json or text
    log_file: Optional[str] = Field(default="logs/app.log", env="LOG_FILE")
    log_rotation: str = Field(default="daily", env="LOG_ROTATION")
    log_retention_days: int = Field(default=30, env="LOG_RETENTION_DAYS")
    
    # Admin panel
    admin_secret_key: str = Field(default="your-secret-key-change-in-production", env="ADMIN_SECRET_KEY")
    admin_host: str = Field(default="0.0.0.0", env="ADMIN_HOST")
    admin_port: int = Field(default=8080, env="ADMIN_PORT")
    
    # Pass limits
    max_active_passes: int = Field(default=3, env="MAX_ACTIVE_PASSES")
    
    # User roles
    roles: Dict[str, str] = Field(default={
        "RESIDENT": "resident",
        "SECURITY": "security", 
        "ADMIN": "admin"
    })
    
    # User statuses
    user_statuses: Dict[str, str] = Field(default={
        "PENDING": "pending",
        "APPROVED": "approved",
        "REJECTED": "rejected",
        "BLOCKED": "blocked"
    })
    
    # Pass statuses
    pass_statuses: Dict[str, str] = Field(default={
        "ACTIVE": "active",
        "USED": "used",
        "CANCELLED": "cancelled"
    })
    
    # Messages
    messages: Dict[str, str] = Field(default={
        "WELCOME": """üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PM Desk!
–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω, –ö–≤–∞—Ä—Ç–∏—Ä–∞
–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, 89997776655, 27""",
        
        "WELCOME_STAFF": """üëÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PM Desk –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞!
–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω
–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, 89997776655""",
        
        "REGISTRATION_SENT": "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
        "REGISTRATION_APPROVED": "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞!",
        "REGISTRATION_REJECTED": "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        
        "PASS_CREATION_REQUEST": """üöó –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫
–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è:
–ù–∞–ø—Ä–∏–º–µ—Ä: –ê123–ê–ê777""",
        
        "PASS_CREATED": "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–æ–º–µ—Ä: {car_number}",
        "INVALID_FORMAT": """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ: –§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω, –ö–≤–∞—Ä—Ç–∏—Ä–∞
–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, +7 900 123 45 67, 15""",
        
        "INVALID_FORMAT_STAFF": """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
–û—Ç–ø—Ä–∞–≤—å—Ç–µ: –§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω
–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, +7 900 123 45 67""",
        
        "ALL_FIELDS_REQUIRED": "‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
        "ENTER_CAR_NUMBER": "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "MAX_PASSES_REACHED": "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
        "DUPLICATE_PASS": "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º",
        "NO_RIGHTS": "‚ùå –ù–µ—Ç –ø—Ä–∞–≤",
        "PASS_ALREADY_USED": "‚ùå –ü—Ä–æ–ø—É—Å–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
        "REQUEST_ALREADY_PROCESSED": "‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
    })
    
    # Security messages
    security_messages: Dict[str, str] = Field(default={
        "WELCOME": """–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.""",
        
        "ADMIN_WELCOME": """üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PM Desk. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ö–æ–¥—è—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ.""",
        
        "PASS_NOT_FOUND": "‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å –Ω–æ–º–µ—Ä–æ–º {car_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞.",
        "PASS_USED": "‚úÖ –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π!",
        "PASS_ALREADY_USED": "‚ùå –ü—Ä–æ–ø—É—Å–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω",
        "NO_RIGHTS": "‚ùå –ù–µ—Ç –ø—Ä–∞–≤",
        "ENTER_CAR_NUMBER": "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "USER_APPROVED": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω",
        "USER_REJECTED": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω",
        "USER_BLOCKED": "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        "USER_UNBLOCKED": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    })
    
    @field_validator('log_level')
    @classmethod
    def validate_log_level(cls, v):
        valid_levels = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
        if v.upper() not in valid_levels:
            raise ValueError(f'log_level must be one of {valid_levels}')
        return v.upper()
    
    @field_validator('log_format')
    @classmethod
    def validate_log_format(cls, v):
        valid_formats = ['json', 'text']
        if v.lower() not in valid_formats:
            raise ValueError(f'log_format must be one of {valid_formats}')
        return v.lower()
    
    @field_validator('log_rotation')
    @classmethod
    def validate_log_rotation(cls, v):
        valid_rotations = ['daily', 'weekly', 'monthly', 'size']
        if v.lower() not in valid_rotations:
            raise ValueError(f'log_rotation must be one of {valid_rotations}')
        return v.lower()
    
    @field_validator('database_path')
    @classmethod
    def validate_database_path(cls, v):
        # Ensure database directory exists
        db_path = Path(v)
        db_path.parent.mkdir(parents=True, exist_ok=True)
        return str(db_path)
    
    model_config = {
        "env_file": ".env",
        "case_sensitive": False,
        "validate_assignment": True,
        "extra": "ignore"  # Ignore extra fields from .env
    }


# Global settings instance
settings = Settings()

# Backward compatibility exports
BOT_TOKEN = settings.resident_bot_token
RESIDENT_BOT_TOKEN = settings.resident_bot_token
SECURITY_BOT_TOKEN = settings.security_bot_token
DATABASE_PATH = settings.database_path
ROLES = settings.roles
USER_STATUSES = settings.user_statuses
PASS_STATUSES = settings.pass_statuses
MESSAGES = settings.messages
SECURITY_MESSAGES = settings.security_messages
MAX_ACTIVE_PASSES = settings.max_active_passes
