import time
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from ..database import db
from ..database.models import User
from ..keyboards.security_keyboards import get_security_main_menu, get_pass_search_keyboard, get_passes_list_keyboard, get_approved_user_keyboard
from ..utils.validators import validate_car_number
from ..utils.notifications import notify_admins_new_registration
from ..security.rate_limiter import rate_limiter
from ..security.validator import validator
from ..security.audit_logger import audit_logger
from ..monitoring.metrics import metrics_collector
from ..features.analytics import analytics_service
from ..core.exceptions import ValidationError, DatabaseError
from ..core.logging import get_logger, log_user_action, log_performance, log_error
from ..config import MESSAGES, ROLES, USER_STATUSES, PASS_STATUSES, BOT_TOKEN
logger = get_logger(__name__)
router = Router()

async def is_security(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –æ—Ö—Ä–∞–Ω—ã"""
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user.role == ROLES['SECURITY'] and user.status == USER_STATUSES['APPROVED']

async def is_admin(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user.role == ROLES['ADMIN'] and user.status == USER_STATUSES['APPROVED']

async def is_staff(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º (–∞–¥–º–∏–Ω –∏–ª–∏ –æ—Ö—Ä–∞–Ω–Ω–∏–∫)"""
    return await is_security(telegram_id) or await is_admin(telegram_id)

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"""
    user_id = message.from_user.id
    try:
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏
        analytics_service.start_session(user_id)
        analytics_service.track_action(user_id, "start_command")
        log_user_action(logger, user_id, "start_command")
        
        user = await db.get_user_by_telegram_id(user_id)
        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            analytics_service.track_page_view(user_id, "staff_welcome_page")
            await message.answer(MESSAGES['WELCOME_STAFF'])
        elif user.status == USER_STATUSES['PENDING']:
            analytics_service.track_page_view(user_id, "pending_status")
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", reply_markup=get_approved_user_keyboard())
        elif user.status == USER_STATUSES['REJECTED']:
            analytics_service.track_page_view(user_id, "rejected_status")
            await message.answer(MESSAGES['REGISTRATION_REJECTED'], reply_markup=get_approved_user_keyboard())
        elif user.role == ROLES['SECURITY'] and user.status == USER_STATUSES['APPROVED']:
            analytics_service.track_page_view(user_id, "security_main_menu")
            await message.answer(
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.",
                reply_markup=get_security_main_menu()
            )
        elif user.role == ROLES['ADMIN'] and user.status == USER_STATUSES['APPROVED']:
            analytics_service.track_page_view(user_id, "admin_main_menu")
            await message.answer(
                "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PM Desk. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ö–æ–¥—è—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await message.answer(MESSAGES['WELCOME_STAFF'])
    except Exception as e:
        log_error(logger, e, {"user_id": user_id, "action": "start_command"})
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text.contains(","))
async def handle_staff_registration(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∞–¥–º–∏–Ω—ã –∏ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∏) - —Ñ–æ—Ä–º–∞—Ç "–§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω" """
    user_id = message.from_user.id
    start_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(user_id):
        remaining_time = rate_limiter.get_block_time_remaining(user_id)
        if remaining_time:
            await message.answer(f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.")
            audit_logger.log_rate_limit_exceeded(user_id, 15)
            metrics_collector.record_user_action("staff_registration", user_id, False)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    user = await db.get_user_by_telegram_id(user_id)
    if user:
        if user.role in [ROLES['SECURITY'], ROLES['ADMIN']]:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=get_approved_user_keyboard())
        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∂–∏—Ç–µ–ª—å.", reply_markup=get_approved_user_keyboard())
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    is_valid, error_msg, form_data = validator.validate_staff_registration_data(message.text)
    if not is_valid:
        await message.answer(error_msg or MESSAGES['INVALID_FORMAT_STAFF'], reply_markup=get_approved_user_keyboard())
        audit_logger.log_failed_attempt(user_id, "staff_registration", error_msg or "Invalid format")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SECURITY, –∞–¥–º–∏–Ω—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
    role = ROLES['SECURITY']
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    new_user = User(
        telegram_id=message.from_user.id,
        role=role,
        full_name=form_data['full_name'],
        phone_number=form_data['phone_number'],
        apartment="N/A",  # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        status=USER_STATUSES['PENDING']
    )
    
    try:
        user_id = await db.create_user(new_user)
        new_user.id = user_id
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        audit_logger.log_user_registration(user_id, form_data)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            notification_bot = Bot(
                token=BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            await notify_admins_new_registration(notification_bot, new_user)
            await notification_bot.session.close()
        except Exception as e:
            logger.warning(f"Could not send notifications: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await message.answer(MESSAGES['REGISTRATION_SENT'])
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        duration = time.time() - start_time
        metrics_collector.record_response_time(
            "staff_registration", duration, "success", user_id
        )
        metrics_collector.record_user_action("staff_registration", user_id, True)
        logger.info(f"New staff user registered: {new_user.full_name} (ID: {user_id}, Role: {role})")
        
    except Exception as e:
        duration = time.time() - start_time
        metrics_collector.record_response_time(
            "staff_registration", duration, "error", user_id
        )
        metrics_collector.record_user_action("staff_registration", user_id, False)
        metrics_collector.record_error("staff_registration_error", "staff_registration", user_id, str(e))
        logger.error(f"Failed to register staff user: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_approved_user_keyboard()
        )

@router.message(Command("search"))

async def search_command(message: Message):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /search"""
    if not await is_security(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=ReplyKeyboardRemove())
        return
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_pass_search_keyboard())
@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫")

async def handle_search_pass_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫'"""
    logger.info(f"SECURITY SEARCH BUTTON PRESSED by user {message.from_user.id}, text: '{message.text}'")
    if not await is_security(message.from_user.id):
        logger.warning(f"User {message.from_user.id} is not security")
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=ReplyKeyboardRemove())
        return
    logger.info(f"Security user {message.from_user.id} starting search")
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_pass_search_keyboard()
    )
@router.message(
    F.text & ~F.text.startswith('/') &
    ~F.text.in_([
        "üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫", "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º", "üîô –ù–∞–∑–∞–¥",
        "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùå –û—Ç–º–µ–Ω–∞"
    ])
)

async def handle_security_text_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤ (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫)"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–º
    if not await is_security(message.from_user.id):
        # –ï—Å–ª–∏ –Ω–µ –æ—Ö—Ä–∞–Ω–Ω–∏–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ return (—á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–ª–æ—Å—å –¥–∞–ª—å—à–µ)
        return
    logger.info(f"SECURITY TEXT MESSAGE from user {message.from_user.id}, text: '{message.text}'")
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—à–∏–Ω—ã
    await handle_pass_search_internal(message)
@router.message(F.text == "üîô –ù–∞–∑–∞–¥")

async def handle_back_pass_search_message(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞"""
    if not await is_security(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=ReplyKeyboardRemove())
        return
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.", reply_markup=get_security_main_menu())
@router.message(F.text.regexp(r'^\d{1,3}$'))

async def handle_security_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤)"""
    user_id = message.from_user.id
    logger.info(f"SECURITY TEXT MESSAGE from user {user_id}, text: '{message.text}'")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(user_id):
        remaining_time = rate_limiter.get_block_time_remaining(user_id)
        if remaining_time:
            await message.answer(f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.")
            audit_logger.log_rate_limit_exceeded(user_id, 15)
        return
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–º
    if not await is_security(user_id):
        logger.info(f"User {user_id} is not security, skipping")
        return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–µ-–æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if message.text in ["üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫", "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º", "üîô –ù–∞–∑–∞–¥"]:
        return
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –º–∞—à–∏–Ω—ã
    await handle_pass_search_internal(message)
@router.message(F.text.regexp(r'^[–ê-–Ø–∞-—è]\d{3}[–ê-–Ø–∞-—è]{2}\d{3}$'))

async def handle_pass_search(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    user_id = message.from_user.id
    logger.info(f"SECURITY PASS SEARCH by user {user_id}, text: '{message.text}'")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(user_id):
        remaining_time = rate_limiter.get_block_time_remaining(user_id)
        if remaining_time:
            await message.answer(f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.")
            audit_logger.log_rate_limit_exceeded(user_id, 15)
        return
    if not await is_security(user_id):
        logger.warning(f"User {user_id} is not security")
        return
    await handle_pass_search_internal(message)

async def handle_pass_search_internal(message: Message):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞"""
    user_id = message.from_user.id
    car_number = message.text.strip().upper()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    is_valid, error_msg = validator.validate_search_query(car_number)
    if not is_valid:
        await message.answer(error_msg or MESSAGES['ENTER_CAR_NUMBER'], reply_markup=get_pass_search_keyboard())
        audit_logger.log_failed_attempt(user_id, "pass_search", error_msg or "Invalid search query")
        return
    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –µ–≥–æ
    if len(car_number) > 3 and not validate_car_number(car_number):
        await message.answer(MESSAGES['ENTER_CAR_NUMBER'], reply_markup=get_pass_search_keyboard())
        audit_logger.log_failed_attempt(user_id, "pass_search", "Invalid car number format")
        return
    # –ò—â–µ–º –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ –Ω–æ–º–µ—Ä—É (–ø–æ–ª–Ω–æ–º—É –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º—É)
    passes = await db.find_all_passes_by_car_number(car_number)
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    audit_logger.log_successful_action(user_id, "pass_search", {
        "search_query": car_number,
        "results_count": len(passes)
    })
    if not passes:
        await message.answer(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{car_number}', –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=get_security_main_menu())
        return
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    text = f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {len(passes)}\n\n"
    for i, pass_obj in enumerate(passes, 1):
        user = await db.get_user_by_id(pass_obj.user_id)
        created_at_str = pass_obj.created_at.strftime('%d.%m.%Y %H:%M') if hasattr(pass_obj.created_at, 'strftime') else str(pass_obj.created_at)
        text += f"{i}. {pass_obj.car_number}\n"
        text += f"   üë§ {user.full_name} (–∫–≤. {user.apartment})\n"
        text += f"   üìÖ {created_at_str}\n\n"
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
    keyboard = get_passes_list_keyboard(passes)
    await message.answer(text, reply_markup=keyboard)
@router.callback_query(F.data.startswith("use_pass_"))

async def handle_use_pass_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ callback"""
    if not await is_security(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑ callback_data
    pass_id = int(callback.data.split("_")[2])
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    pass_obj = await db.get_pass_by_id(pass_id)
    if not pass_obj:
        await callback.answer("‚ùå –ü—Ä–æ–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–µ–Ω
    if pass_obj.status != PASS_STATUSES['ACTIVE']:
        await callback.answer("‚ùå –ü—Ä–æ–ø—É—Å–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", show_alert=True)
        return
    # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await db.update_pass_status(pass_id, PASS_STATUSES['USED'], callback.from_user.id)
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞
    audit_logger.log_pass_usage(pass_obj.user_id, pass_id, pass_obj.car_number, callback.from_user.id)
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    user = await db.get_user_by_id(pass_obj.user_id)
    await callback.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π", show_alert=True)
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–æ–ø—É—Å–∫ {pass_obj.car_number} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π\n\n"
        f"üë§ {user.full_name}\n"
        f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ {user.apartment}"
    )
    await callback.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.",
        reply_markup=get_security_main_menu()
    )
@router.callback_query(F.data == "search_another")

async def handle_search_another_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞"""
    if not await is_security(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    await callback.message.edit_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_pass_search_keyboard())

def register_security_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ö—Ä–∞–Ω—ã"""
    logger.info("Registering security handlers")
    dp.include_router(router)
    logger.info("Security handlers registered successfully")
