import logging
import asyncio
import time
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from ..database import db
from ..database.models import User, Pass
from ..keyboards.resident_keyboards import get_resident_main_menu, get_resident_passes_keyboard, get_pass_creation_keyboard, get_approved_user_keyboard
from ..utils.validators import validate_registration_form, validate_car_number
from ..utils.notifications import notify_admins_new_registration
from ..security.rate_limiter import rate_limiter
from ..security.validator import validator
from ..security.audit_logger import audit_logger
from ..monitoring.metrics import metrics_collector
from ..services.error_handler import error_handler
from ..core.exceptions import ValidationError, DatabaseError
from ..services.cache_service import cache_service
from ..features.analytics import analytics_service
from ..features.navigation import navigation_service
from ..config import MESSAGES, ROLES, USER_STATUSES, PASS_STATUSES, BOT_TOKEN
logger = logging.getLogger(__name__)
router = Router()

async def is_resident(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–∏—Ç–µ–ª–µ–º"""
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user.role == ROLES['RESIDENT'] and user.status == USER_STATUSES['APPROVED']
@router.message(Command("start"))

async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    user_id = message.from_user.id
    try:
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏
        analytics_service.start_session(user_id)
        analytics_service.track_action(user_id, "start_command")
        user = await db.get_user_by_telegram_id(user_id)
        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            analytics_service.track_page_view(user_id, "welcome_page")
            await message.answer(MESSAGES['WELCOME'])
        elif user.status == USER_STATUSES['PENDING']:
            analytics_service.track_page_view(user_id, "pending_status")
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", reply_markup=get_approved_user_keyboard())
        elif user.status == USER_STATUSES['REJECTED']:
            analytics_service.track_page_view(user_id, "rejected_status")
            await message.answer(MESSAGES['REGISTRATION_REJECTED'], reply_markup=get_approved_user_keyboard())
        elif user.role == ROLES['RESIDENT'] and user.status == USER_STATUSES['APPROVED']:
            analytics_service.track_page_view(user_id, "resident_main_menu")
            navigation_service.add_to_history(user_id, "resident_main_menu")
            await message.answer("üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PM Desk!", reply_markup=get_approved_user_keyboard())
        elif user.role == ROLES['ADMIN'] and user.status == USER_STATUSES['APPROVED']:
            await message.answer(
                "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ PM Desk. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ö–æ–¥—è—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
        elif user.role == ROLES['SECURITY'] and user.status == USER_STATUSES['APPROVED']:
            analytics_service.track_page_view(user_id, "security_main_menu")
            navigation_service.add_to_history(user_id, "security_main_menu")
            from ..keyboards.security_keyboards import get_security_main_menu
            await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.", reply_markup=get_security_main_menu())
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        error_response = await error_handler.handle_error(e, {'user_id': user_id, 'action': 'start_command'})
        await message.answer(error_response)
        analytics_service.track_action(user_id, "start_command", success=False)
@router.message(F.text.contains(","))

async def handle_registration(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∂–∏—Ç–µ–ª—è (1 —à–∞–≥)"""
    user_id = message.from_user.id
    start_time = time.time()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(user_id):
        remaining_time = rate_limiter.get_block_time_remaining(user_id)
        if remaining_time:
            await message.answer(f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.")
            audit_logger.log_rate_limit_exceeded(user_id, 15)
            metrics_collector.record_user_action("registration", user_id, False)
        return
    user = await db.get_user_by_telegram_id(user_id)
    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=get_approved_user_keyboard())
        return
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
    is_valid, error_msg, form_data = validator.validate_registration_data(message.text)
    if not is_valid:
        await message.answer(error_msg or MESSAGES['INVALID_FORMAT'], reply_markup=get_approved_user_keyboard())
        audit_logger.log_failed_attempt(user_id, "registration", error_msg or "Invalid format")
        return
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = User(
        telegram_id=message.from_user.id,
        role=ROLES['RESIDENT'],
        full_name=form_data['full_name'],
        phone_number=form_data['phone_number'],
        apartment=form_data['apartment'],
        status=USER_STATUSES['PENDING']
    )
    try:
        user_id = await db.create_user(new_user)
        new_user.id = user_id
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        audit_logger.log_user_registration(user_id, form_data)
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        from aiogram import Bot
        from aiogram.client.default import DefaultBotProperties
        from aiogram.enums import ParseMode
        try:
            notification_bot = Bot(
                token=BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            await notify_admins_new_registration(notification_bot, new_user)
            await notification_bot.session.close()
        except Exception as e:
            logger.warning(f"Could not send notifications: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await message.answer(MESSAGES['REGISTRATION_SENT'])
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        duration = time.time() - start_time
        metrics_collector.record_response_time(
            "registration", duration, "success", user_id
        )
        metrics_collector.record_user_action("registration", user_id, True)
        logger.info(f"New user registered: {new_user.full_name} (ID: {user_id})")
    except Exception as e:
        duration = time.time() - start_time
        metrics_collector.record_response_time(
            "registration", duration, "error", user_id
        )
        metrics_collector.record_user_action("registration", user_id, False)
        metrics_collector.record_error("registration_error", "registration", user_id, str(e))
        logger.error(f"Failed to register user: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_approved_user_keyboard()
        )
@router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")

async def handle_create_pass_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'"""
    logger.info(f"Create pass message from user {message.from_user.id}")
    try:
        if not await is_resident(message.from_user.id):
            logger.warning(f"User {message.from_user.id} is not a resident")
            await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=get_approved_user_keyboard())
            return
        logger.info(f"User {message.from_user.id} is a resident, showing pass creation form")
        keyboard = get_pass_creation_keyboard()
        await message.answer(MESSAGES['PASS_CREATION_REQUEST'], reply_markup=keyboard)
        logger.info(f"Pass creation form shown to user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in handle_create_pass_message: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=get_approved_user_keyboard())
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")

async def handle_cancel_pass_creation_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    logger.info(f"Cancel button pressed by user {message.from_user.id}")
    if not await is_resident(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=get_approved_user_keyboard())
        return
    # –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = get_approved_user_keyboard()
    await message.answer("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\nüè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PM Desk!", reply_markup=keyboard)
    logger.info(f"User {message.from_user.id} returned to main menu")
@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")

async def handle_my_passes_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –∂–∏—Ç–µ–ª—è"""
    if not await is_resident(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=get_approved_user_keyboard())
        return
    user = await db.get_user_by_telegram_id(message.from_user.id)
    passes = await db.get_user_passes(user.id)
    if not passes:
        text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞"
    else:
        text = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞:\n\n"
        for pass_obj in passes:
            status_emoji = "üü¢" if pass_obj.status == PASS_STATUSES['ACTIVE'] else "üî¥"
            status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if pass_obj.status == PASS_STATUSES['ACTIVE'] else "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"
            text += f"{status_emoji} {pass_obj.car_number} - {status_text}\n"
            text += f"üìÖ {pass_obj.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    await message.answer(text, reply_markup=get_resident_passes_keyboard())
@router.message(F.text.regexp(r'^[–ê-–Ø–∞-—èA-Za-z]\d{3}[–ê-–Ø–∞-—èA-Za-z]{2}\d{3}$'))

async def handle_resident_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∂–∏—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    logger.info(f"TEXT MESSAGE RECEIVED from user {user_id}, text: '{message.text}'")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    if not await rate_limiter.is_allowed(user_id):
        remaining_time = rate_limiter.get_block_time_remaining(user_id)
        if remaining_time:
            await message.answer(f"‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(remaining_time)} —Å–µ–∫—É–Ω–¥.")
            audit_logger.log_rate_limit_exceeded(user_id, 15)
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–∏—Ç–µ–ª–µ–º
    if not await is_resident(user_id):
        logger.info(f"User {user_id} is not a resident, skipping")
        # –ï—Å–ª–∏ –Ω–µ –∂–∏—Ç–µ–ª—å, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–ª—å—à–µ
        return
    text = message.text.strip()
    logger.info(f"Text message from resident {message.from_user.id}: {text}")
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if text in ["üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏"]:
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    import re
    pattern = r'^[–ê-–Ø–∞-—èA-Za-z]\d{3}[–ê-–Ø–∞-—èA-Za-z]{2}\d{3}$'
    if re.match(pattern, text):
        logger.info(f"Text matches car number pattern: {text}")
        await handle_pass_creation_internal(message, text)
    else:
        logger.info(f"Text does not match car number pattern: {text}")
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

async def handle_pass_creation_internal(message: Message, car_number: str):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫"""
    user_id = message.from_user.id
    logger.info(f"Processing car number: {car_number}")
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ
    car_number = car_number.upper()
    logger.info(f"Converted to uppercase: {car_number}")
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    is_valid, error_msg = validator.validate_car_number(car_number)
    if not is_valid:
        logger.warning(f"Invalid car number: {car_number} - {error_msg}")
        await message.answer(error_msg or MESSAGES['ENTER_CAR_NUMBER'], reply_markup=get_pass_creation_keyboard())
        audit_logger.log_failed_attempt(user_id, "pass_creation", error_msg or "Invalid car number")
        return
    user = await db.get_user_by_telegram_id(message.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —É–±—Ä–∞–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if await db.check_duplicate_pass(user.id, car_number):
        await message.answer(MESSAGES['DUPLICATE_PASS'], reply_markup=get_approved_user_keyboard())
        return
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    pass_obj = Pass(
        user_id=user.id,
        car_number=car_number,
        status=PASS_STATUSES['ACTIVE']
    )
    try:
        pass_id = await db.create_pass(pass_obj)
        pass_obj.id = pass_id
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞–º –æ—Ç–∫–ª—é—á–µ–Ω—ã - –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞
        audit_logger.log_pass_creation(user_id, car_number)
        await message.answer(MESSAGES['PASS_CREATED'].format(car_number=car_number), reply_markup=get_approved_user_keyboard())
        logger.info(f"New pass created: {car_number} by user {user.full_name}")
    except Exception as e:
        logger.error(f"Failed to create pass: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_approved_user_keyboard())

def register_resident_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∂–∏—Ç–µ–ª–µ–π"""
    logger.info("Registering resident handlers")
    dp.include_router(router)
    logger.info("Resident handlers registered successfully")
