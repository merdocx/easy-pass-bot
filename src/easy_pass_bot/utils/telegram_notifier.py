"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""
import asyncio
import logging
from typing import Optional, Dict, Any
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self, bot_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.bot_token = bot_token
        self.bot = Bot(
            token=bot_token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
    
    async def send_admin_credentials(self, user_id: int, full_name: str, 
                                   phone_number: str, password: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ª–æ–≥–∏–Ω)
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            message = self._format_admin_credentials_message(
                full_name, phone_number, password
            )
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"Admin credentials sent to user {user_id} ({full_name})")
            return True
            
        except TelegramForbiddenError:
            logger.warning(f"User {user_id} ({full_name}) blocked the bot")
            return False
        except TelegramBadRequest as e:
            logger.error(f"Bad request when sending to user {user_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"Error sending admin credentials to user {user_id}: {e}")
            return False
    
    async def send_admin_welcome(self, user_id: int, full_name: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            message = f"""
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>

–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã Easy Pass Bot!

üîê –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:
‚Ä¢ <b>–õ–æ–≥–∏–Ω:</b> –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ <b>–ü–∞—Ä–æ–ª—å:</b> –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)

üåê <b>–ê–¥—Ä–µ—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b> <code>http://localhost:8080</code>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!
            """
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"Admin welcome sent to user {user_id} ({full_name})")
            return True
            
        except Exception as e:
            logger.error(f"Error sending admin welcome to user {user_id}: {e}")
            return False
    
    async def send_role_change_notification(self, user_id: int, full_name: str, 
                                          old_role: str, new_role: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            old_role: –°—Ç–∞—Ä–∞—è —Ä–æ–ª—å
            new_role: –ù–æ–≤–∞—è —Ä–æ–ª—å
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            message = self._format_role_change_message(full_name, old_role, new_role)
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=ParseMode.HTML
            )
            
            logger.info(f"Role change notification sent to user {user_id} ({full_name}): {old_role} -> {new_role}")
            return True
            
        except TelegramForbiddenError:
            logger.warning(f"User {user_id} ({full_name}) blocked the bot")
            return False
        except TelegramBadRequest as e:
            logger.error(f"Bad request when sending role change to user {user_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"Error sending role change notification to user {user_id}: {e}")
            return False
    
    def _format_role_change_message(self, full_name: str, old_role: str, new_role: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏
        
        Args:
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            old_role: –°—Ç–∞—Ä–∞—è —Ä–æ–ª—å
            new_role: –ù–æ–≤–∞—è —Ä–æ–ª—å
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ü–µ—Ä–µ–≤–æ–¥ —Ä–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        role_translations = {
            'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            'security': '–û—Ö—Ä–∞–Ω–∞',
            'resident': '–ñ–∏—Ç–µ–ª—å'
        }
        
        old_role_ru = role_translations.get(old_role, old_role)
        new_role_ru = role_translations.get(new_role, new_role)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if new_role == 'admin':
            emoji = "üéâ"
            message_type = "–ø–æ–≤—ã—à–µ–Ω–∞"
            details = """
üîê <b>–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!</b>
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
‚Ä¢ –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

üåê <b>–ê–¥—Ä–µ—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b> <code>http://localhost:8080</code>
            """
        elif new_role == 'security':
            emoji = "üõ°Ô∏è"
            message_type = "–Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
            details = """
üõ°Ô∏è <b>–¢–µ–ø–µ—Ä—å –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ —Å–ª—É–∂–±–µ –æ—Ö—Ä–∞–Ω—ã!</b>
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏
‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            """
        elif new_role == 'resident':
            emoji = "üè†"
            message_type = "–∏–∑–º–µ–Ω–µ–Ω–∞"
            details = """
üè† <b>–¢–µ–ø–µ—Ä—å –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∂–∏—Ç–µ–ª–µ–º!</b>
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –æ—Ö—Ä–∞–Ω–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            """
        else:
            emoji = "üìù"
            message_type = "–∏–∑–º–µ–Ω–µ–Ω–∞"
            details = f"–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{new_role_ru}</b>"
        
        return f"""
{emoji} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name}
üìã <b>–í–∞—à–∞ —Ä–æ–ª—å {message_type} —Å:</b> <b>{old_role_ru}</b> ‚Üí <b>{new_role_ru}</b>

{details}

üìÖ <b>–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b> {self._get_current_time()}

‚ÑπÔ∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
        """
    
    def _get_current_time(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y %H:%M")
    
    def _format_admin_credentials_message(self, full_name: str, phone_number: str, password: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        Args:
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            password: –ü–∞—Ä–æ–ª—å
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        return f"""
üîê <b>–í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>

üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {full_name}
üì± <b>–õ–æ–≥–∏–Ω (—Ç–µ–ª–µ—Ñ–æ–Ω):</b> <code>{phone_number}</code>
üîë <b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>

üåê <b>–ê–¥—Ä–µ—Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:</b> <code>http://localhost:8080</code>

‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
        """
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
        try:
            await self.bot.session.close()
        except Exception as e:
            logger.error(f"Error closing bot session: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
_notifier_instance: Optional[TelegramNotifier] = None

def get_notifier() -> Optional[TelegramNotifier]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return _notifier_instance

def init_notifier(bot_token: str) -> TelegramNotifier:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global _notifier_instance
    _notifier_instance = TelegramNotifier(bot_token)
    return _notifier_instance

async def send_admin_credentials_async(user_id: int, full_name: str, 
                                     phone_number: str, password: str) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        password: –ü–∞—Ä–æ–ª—å
        
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    notifier = get_notifier()
    if not notifier:
        logger.error("TelegramNotifier not initialized")
        return False
    
    return await notifier.send_admin_credentials(user_id, full_name, phone_number, password)

async def send_role_change_notification_async(user_id: int, full_name: str, 
                                            old_role: str, new_role: str) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        old_role: –°—Ç–∞—Ä–∞—è —Ä–æ–ª—å
        new_role: –ù–æ–≤–∞—è —Ä–æ–ª—å
        
    Returns:
        bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    notifier = get_notifier()
    if not notifier:
        logger.error("TelegramNotifier not initialized")
        return False
    
    return await notifier.send_role_change_notification(user_id, full_name, old_role, new_role)

