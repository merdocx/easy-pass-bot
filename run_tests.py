#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Easy Pass Bot
"""
import sys
import subprocess
import argparse
import os
from pathlib import Path


def run_command(command, description):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            check=True, 
            capture_output=True, 
            text=True
        )
        print(result.stdout)
        if result.stderr:
            print("STDERR:", result.stderr)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        print("STDOUT:", e.stdout)
        print("STDERR:", e.stderr)
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Easy Pass Bot')
    parser.add_argument(
        '--type', 
        choices=['unit', 'integration', 'e2e', 'all'], 
        default='all',
        help='–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞'
    )
    parser.add_argument(
        '--coverage', 
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞'
    )
    parser.add_argument(
        '--performance', 
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    )
    parser.add_argument(
        '--security', 
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
    )
    parser.add_argument(
        '--verbose', 
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    parser.add_argument(
        '--parallel', 
        type=int,
        default=0,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ)'
    )
    parser.add_argument(
        '--html-report', 
        action='store_true',
        help='–°–æ–∑–¥–∞—Ç—å HTML –æ—Ç—á–µ—Ç'
    )
    
    args = parser.parse_args()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    project_root = Path(__file__).parent
    os.chdir(project_root)
    
    print("üß™ Easy Pass Bot - –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {project_root}")
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã pytest
    pytest_cmd = "python -m pytest"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
    if args.verbose:
        pytest_cmd += " -v"
    
    if args.coverage:
        pytest_cmd += " --cov=src/easy_pass_bot --cov-report=html:htmlcov --cov-report=term-missing"
    
    if args.parallel > 0:
        pytest_cmd += f" -n {args.parallel}"
    elif args.parallel == 0:
        pytest_cmd += " -n 0"  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    
    if args.html_report:
        pytest_cmd += " --html=report.html --self-contained-html"
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ —Ç–∏–ø—É
    if args.type == 'unit':
        pytest_cmd += " tests/unit/"
    elif args.type == 'integration':
        pytest_cmd += " tests/integration/"
    elif args.type == 'e2e':
        pytest_cmd += " tests/e2e/"
    else:  # all
        pytest_cmd += " tests/"
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not args.performance:
        pytest_cmd += " -m 'not slow'"
    
    if not args.security:
        pytest_cmd += " -m 'not security'"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = run_command(pytest_cmd, "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    
    if not success:
        print("\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if args.coverage:
        print("\nüìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–Ω –≤ htmlcov/index.html")
    
    if args.html_report:
        print("\nüìÑ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ report.html")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞
    if run_command("python -m flake8 src/ --exclude=__pycache__", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ (flake8)"):
        print("‚úÖ –°—Ç–∏–ª—å –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º")
    else:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å—Ç–∏–ª—è –∫–æ–¥–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    if run_command("python -m mypy src/ --ignore-missing-imports", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (mypy)"):
        print("‚úÖ –¢–∏–ø–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π")
    
    print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    main()