"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ –æ—Ö—Ä–∞–Ω—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../src'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from easy_pass_bot.database import db
from easy_pass_bot.keyboards.security_keyboards import get_security_main_menu, get_pass_search_keyboard, get_passes_list_keyboard
from easy_pass_bot.security.rate_limiter import rate_limiter
from easy_pass_bot.security.validator import validator
from easy_pass_bot.security.audit_logger import audit_logger
from config import SECURITY_MESSAGES, ROLES, USER_STATUSES, PASS_STATUSES

logger = logging.getLogger(__name__)
router = Router()

async def is_security(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –æ—Ö—Ä–∞–Ω—ã"""
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user.role == ROLES['SECURITY'] and user.status == USER_STATUSES['APPROVED']

async def is_admin(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user.role == ROLES['ADMIN'] and user.status == USER_STATUSES['APPROVED']

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"""
    user_id = message.from_user.id
    user = await db.get_user_by_telegram_id(user_id)
    
    if not user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        await message.answer("üëÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PM Desk –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞!\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, 89997776655")
    elif user.status == USER_STATUSES['PENDING']:
        await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
    elif user.status == USER_STATUSES['REJECTED']:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    elif user.role == ROLES['SECURITY'] and user.status == USER_STATUSES['APPROVED']:
        await message.answer(SECURITY_MESSAGES['WELCOME'], reply_markup=get_security_main_menu())
    elif user.role == ROLES['ADMIN'] and user.status == USER_STATUSES['APPROVED']:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.answer(SECURITY_MESSAGES['ADMIN_WELCOME'], reply_markup=ReplyKeyboardRemove())
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await message.answer("üëÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PM Desk –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞!\n–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, 89997776655")

@router.message(Command("search"))
async def search_command(message: Message):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /search"""
    if not await is_security(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=ReplyKeyboardRemove())
        return
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_pass_search_keyboard())

@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫")
async def handle_search_pass_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫'"""
    logger.info(f"SECURITY SEARCH BUTTON PRESSED by user {message.from_user.id}, text: '{message.text}'")
    if not await is_security(message.from_user.id):
        logger.warning(f"User {message.from_user.id} is not security")
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=ReplyKeyboardRemove())
        return
    logger.info(f"Security user {message.from_user.id} starting search")
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_pass_search_keyboard()
    )

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
async def handle_passes_list_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—Å–∫–æ–≤'"""
    if not await is_security(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=ReplyKeyboardRemove())
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏
    passes = await db.get_all_passes()
    active_passes = [p for p in passes if p.status == PASS_STATUSES['ACTIVE'] and not p.is_archived]
    
    if not active_passes:
        await message.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤")
        return
    
    await message.answer("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏:", reply_markup=get_passes_list_keyboard(active_passes))

@router.message(F.text.contains(","))
async def handle_staff_registration(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–∞–¥–º–∏–Ω—ã –∏ –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∏) - —Ñ–æ—Ä–º–∞—Ç "–§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω" """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    user = await db.get_user_by_telegram_id(user_id)
    if user:
        if user.role in [ROLES['SECURITY'], ROLES['ADMIN']]:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∂–∏—Ç–µ–ª—å.")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    is_valid, error_msg, form_data = validator.validate_staff_registration_data(message.text)
    if not is_valid:
        await message.answer(error_msg or "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ: –§–ò–û, –¢–µ–ª–µ—Ñ–æ–Ω\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, +7 900 123 45 67")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SECURITY, –∞–¥–º–∏–Ω—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
    role = ROLES['SECURITY']
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
    from easy_pass_bot.database.models import User
    new_user = User(
        telegram_id=message.from_user.id,
        role=role,
        full_name=form_data['full_name'],
        phone_number=form_data['phone_number'],
        apartment="N/A",  # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        status=USER_STATUSES['PENDING']
    )
    
    try:
        user_id = await db.create_user(new_user)
        new_user.id = user_id
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            from aiogram import Bot
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            from easy_pass_bot.utils.notifications import notify_admins_new_registration
            from config import SECURITY_BOT_TOKEN
            
            notification_bot = Bot(
                token=SECURITY_BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            await notify_admins_new_registration(notification_bot, new_user)
            await notification_bot.session.close()
        except Exception as e:
            logger.warning(f"Could not send notifications: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
        
        logger.info(f"New staff user registered: {new_user.full_name} (ID: {user_id}, Role: {role})")
        
    except Exception as e:
        logger.error(f"Failed to register staff user: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(
    F.text & ~F.text.startswith('/') &
    ~F.text.in_([
        "üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫", "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º", "üîô –ù–∞–∑–∞–¥",
        "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùå –û—Ç–º–µ–Ω–∞", "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–ø—É—Å–∫–æ–≤"
    ])
)
async def handle_security_text_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–≤ (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫)"""
    if not await is_security(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", reply_markup=ReplyKeyboardRemove())
        return
    
    car_number = message.text.strip().upper()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫)
        is_valid, error = validator.validate_car_number_search(car_number)
        if not is_valid:
            await message.answer(f"‚ùå {error or '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è'}")
            return
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É (–ø–æ–ª–Ω–æ–º—É –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º—É)
        passes = await db.find_all_passes_by_car_number(car_number)
        
        if not passes:
            await message.answer(
                f"‚ùå –ü—Ä–æ–ø—É—Å–∫–æ–≤ —Å –Ω–æ–º–µ—Ä–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º '{car_number}', –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=get_security_main_menu()
            )
            return
        
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–ø—É—Å–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if len(passes) == 1:
            pass_obj = passes[0]
            user = await db.get_user_by_id(pass_obj.user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–ø—É—Å–∫–µ
            pass_info = f"""‚úÖ –ü—Ä–æ–ø—É—Å–∫ –Ω–∞–π–¥–µ–Ω!

üöó –ù–æ–º–µ—Ä: {pass_obj.car_number}
üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {user.full_name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {user.apartment if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìÖ –°–æ–∑–¥–∞–Ω: {pass_obj.created_at.strftime('%d.%m.%Y %H:%M') if pass_obj.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä –°—Ç–∞—Ç—É—Å: {pass_obj.status}"""
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
            keyboard = get_passes_list_keyboard(passes)
            await message.answer(pass_info, reply_markup=keyboard)
        else:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            text = f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {len(passes)}\n\n"
            for i, pass_obj in enumerate(passes, 1):
                user = await db.get_user_by_id(pass_obj.user_id)
                created_at_str = pass_obj.created_at.strftime('%d.%m.%Y %H:%M') if pass_obj.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                text += f"{i}. {pass_obj.car_number}\n"
                text += f"   üë§ {user.full_name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (–∫–≤. {user.apartment if user else 'N/A'})\n"
                text += f"   üìÖ {created_at_str}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
            keyboard = get_passes_list_keyboard(passes)
            await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error searching pass: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞")

@router.callback_query(F.data.startswith("use_pass_"))
async def handle_use_pass_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ"""
    if not await is_security(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    try:
        pass_id = int(callback.data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–ø—É—Å–∫
        pass_obj = await db.get_pass_by_id(pass_id)
        if not pass_obj:
            await callback.answer("‚ùå –ü—Ä–æ–ø—É—Å–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        if pass_obj.status == PASS_STATUSES['USED']:
            await callback.answer(SECURITY_MESSAGES['PASS_ALREADY_USED'], show_alert=True)
            return
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        await db.mark_pass_as_used(pass_id, callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user = await db.get_user_by_id(pass_obj.user_id)
        user_name = user.full_name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        user_apt = user.apartment if user else 'N/A'
        
        await callback.answer("‚úÖ –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π", show_alert=True)
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–æ–ø—É—Å–∫ {pass_obj.car_number} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π\n\n"
            f"üë§ {user_name}\n"
            f"üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ {user_apt}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        await callback.message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.",
            reply_markup=get_security_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error using pass: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞", show_alert=True)

@router.callback_query(F.data == "search_another")
async def handle_search_another_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞"""
    if not await is_security(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.message.edit_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=get_pass_search_keyboard())

@router.callback_query(F.data == "back_to_main")
async def handle_back_to_main_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    if not await is_security(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.",
        reply_markup=get_security_main_menu()
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    if not await is_security(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"üîç –ù–∞–π—Ç–∏ –ø—Ä–æ–ø—É—Å–∫\" –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç–º–µ—Ç—å—Ç–µ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, –Ω–∞–∂–∞–≤ \"‚úÖ\" –ø–æ–¥ –ø—Ä–æ–ø—É—Å–∫–æ–º.",
        reply_markup=get_security_main_menu()
    )

def register_security_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ—Ö—Ä–∞–Ω—ã"""
    dp.include_router(router)
    logger.info("Security handlers registered successfully")
