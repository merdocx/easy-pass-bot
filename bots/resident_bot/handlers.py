"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞ –∂–∏—Ç–µ–ª–µ–π
"""
import logging
import asyncio
import time
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../src'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from easy_pass_bot.database import db
from easy_pass_bot.database.models import User, Pass
from easy_pass_bot.keyboards.resident_keyboards import get_resident_main_menu, get_resident_passes_keyboard, get_pass_creation_keyboard, get_approved_user_keyboard
from easy_pass_bot.utils.validators import validate_registration_form, validate_car_number
from easy_pass_bot.utils.notifications import notify_admins_new_registration
from easy_pass_bot.security.rate_limiter import rate_limiter
from easy_pass_bot.security.validator import validator
from easy_pass_bot.security.audit_logger import audit_logger
from easy_pass_bot.monitoring.metrics import metrics_collector
from easy_pass_bot.services.error_handler import error_handler
from easy_pass_bot.core.exceptions import ValidationError, DatabaseError
from easy_pass_bot.services.cache_service import cache_service
from easy_pass_bot.features.analytics import analytics_service
from easy_pass_bot.features.navigation import navigation_service
from config import RESIDENT_MESSAGES, ROLES, USER_STATUSES, PASS_STATUSES

logger = logging.getLogger(__name__)
router = Router()

async def is_resident(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–∏—Ç–µ–ª–µ–º"""
    user = await db.get_user_by_telegram_id(telegram_id)
    return user and user.role == ROLES['RESIDENT'] and user.status == USER_STATUSES['APPROVED']

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    user_id = message.from_user.id
    try:
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏
        analytics_service.start_session(user_id)
        analytics_service.track_action(user_id, "start_command")
        user = await db.get_user_by_telegram_id(user_id)
        if not user:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            analytics_service.track_page_view(user_id, "welcome_page")
            await message.answer(RESIDENT_MESSAGES['WELCOME'])
        elif user.status == USER_STATUSES['PENDING']:
            analytics_service.track_page_view(user_id, "pending_status")
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", reply_markup=get_approved_user_keyboard())
        elif user.status == USER_STATUSES['REJECTED']:
            analytics_service.track_page_view(user_id, "rejected_status")
            await message.answer(RESIDENT_MESSAGES['REGISTRATION_REJECTED'], reply_markup=get_approved_user_keyboard())
        elif user.role == ROLES['RESIDENT'] and user.status == USER_STATUSES['APPROVED']:
            analytics_service.track_page_view(user_id, "resident_main_menu")
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_resident_main_menu())
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await error_handler.handle_error(message, e)

@router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def handle_create_pass_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'"""
    if not await is_resident(message.from_user.id):
        await message.answer(RESIDENT_MESSAGES['NO_RIGHTS'])
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤
    user = await db.get_user_by_telegram_id(message.from_user.id)
    active_passes_count = await db.count_active_passes(user.id)
    
    if active_passes_count >= 3:  # MAX_ACTIVE_PASSES
        await message.answer(RESIDENT_MESSAGES['MAX_PASSES_REACHED'])
        return
    
    await message.answer(RESIDENT_MESSAGES['PASS_CREATION_REQUEST'], reply_markup=get_pass_creation_keyboard())

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def handle_my_passes_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'"""
    if not await is_resident(message.from_user.id):
        await message.answer(RESIDENT_MESSAGES['NO_RIGHTS'])
        return
    
    user = await db.get_user_by_telegram_id(message.from_user.id)
    passes = await db.get_user_passes(user.id)
    
    if not passes:
        await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏", reply_markup=get_resident_passes_keyboard())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–∞–º–∏
    text = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏:\n\n"
    for i, pass_obj in enumerate(passes, 1):
        status_emoji = {
            'active': '‚úÖ',
            'used': 'üî¥',
            'cancelled': '‚ùå'
        }.get(pass_obj.status, '‚ùì')
        
        text += f"{i}. {status_emoji} {pass_obj.car_number} - {pass_obj.status}\n"
        if pass_obj.created_at:
            text += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {pass_obj.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        if pass_obj.used_at:
            text += f"   üöó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞: {pass_obj.used_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += "\n"
    
    await message.answer(text, reply_markup=get_resident_passes_keyboard())

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def handle_cancel_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'"""
    if not await is_resident(message.from_user.id):
        await message.answer(RESIDENT_MESSAGES['NO_RIGHTS'])
        return
    
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_resident_main_menu())

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    if not await is_resident(message.from_user.id):
        await message.answer(RESIDENT_MESSAGES['NO_RIGHTS'])
        return
    
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_resident_main_menu())

@router.message(
    F.text & ~F.text.startswith('/') &
    ~F.text.in_([
        "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", "‚ùå –û—Ç–º–µ–Ω–∞", "üîô –ù–∞–∑–∞–¥"
    ])
)
async def handle_text_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∂–∏—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
        if not await rate_limiter.is_allowed(user_id):
            await message.answer("‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram ID
        is_valid, error = validator.validate_telegram_id(user_id)
        if not is_valid:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            return
        
        user = await db.get_user_by_telegram_id(user_id)
        
        if not user:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await handle_registration(message, text)
        elif user.status == USER_STATUSES['PENDING']:
            await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        elif user.status == USER_STATUSES['REJECTED']:
            await message.answer(RESIDENT_MESSAGES['REGISTRATION_REJECTED'])
        elif user.role == ROLES['RESIDENT'] and user.status == USER_STATUSES['APPROVED']:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞
            await handle_pass_creation(message, text, user)
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            
    except Exception as e:
        logger.error(f"Error handling text message: {e}")
        await error_handler.handle_error(message, e)

async def handle_registration(message: Message, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        validation_result = validate_registration_form(text)
        if not validation_result:
            await message.answer(RESIDENT_MESSAGES['INVALID_FORMAT'])
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        full_name = validation_result['full_name']
        phone = validation_result['phone_number']
        apartment = validation_result['apartment']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=message.from_user.id,
            role=ROLES['RESIDENT'],
            full_name=full_name,
            phone_number=phone,
            apartment=apartment,
            status=USER_STATUSES['PENDING']
        )
        
        user_id = await db.create_user(user)
        user.id = user_id
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        try:
            from aiogram import Bot
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            from config import RESIDENT_BOT_TOKEN
            
            notification_bot = Bot(
                token=RESIDENT_BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            await notify_admins_new_registration(notification_bot, user)
            await notification_bot.session.close()
        except Exception as e:
            logger.warning(f"Could not send notifications: {e}")
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        analytics_service.track_action(message.from_user.id, "user_registration")
        
        await message.answer(RESIDENT_MESSAGES['REGISTRATION_SENT'])
        
    except Exception as e:
        logger.error(f"Error in registration: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_pass_creation(message: Message, text: str, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        is_valid = validate_car_number(text)
        if not is_valid:
            await message.answer(RESIDENT_MESSAGES['ENTER_CAR_NUMBER'])
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        if await db.check_duplicate_pass(user.id, text):
            await message.answer(RESIDENT_MESSAGES['DUPLICATE_PASS'])
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞
        pass_obj = Pass(
            user_id=user.id,
            car_number=text,
            status=PASS_STATUSES['ACTIVE']
        )
        
        pass_id = await db.create_pass(pass_obj)
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        analytics_service.track_action(message.from_user.id, "pass_created")
        
        await message.answer(
            RESIDENT_MESSAGES['PASS_CREATED'].format(car_number=text),
            reply_markup=get_resident_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error creating pass: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("cancel_pass_"))
async def handle_cancel_pass_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞"""
    if not await is_resident(callback.from_user.id):
        await callback.answer(RESIDENT_MESSAGES['NO_RIGHTS'])
        return
    
    try:
        pass_id = int(callback.data.split('_')[2])
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        await db.update_pass_status(pass_id, PASS_STATUSES['CANCELLED'])
        
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_resident_main_menu())
        
    except Exception as e:
        logger.error(f"Error cancelling pass: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏")

def register_resident_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∂–∏—Ç–µ–ª–µ–π"""
    dp.include_router(router)
    logger.info("Resident handlers registered successfully")
